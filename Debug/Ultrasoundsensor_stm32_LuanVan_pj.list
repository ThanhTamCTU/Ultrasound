
Ultrasoundsensor_stm32_LuanVan_pj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000580c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002140  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a5c  08007a5c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007a5c  08007a5c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a5c  08007a5c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  20000080  08007ae4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08007ae4  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126f3  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002848  00000000  00000000  0003279c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00034fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f68  00000000  00000000  00036070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019612  00000000  00000000  00036fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e3a1  00000000  00000000  000505ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d8ce  00000000  00000000  0005e98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  000ec2d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08005904 	.word	0x08005904

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08005904 	.word	0x08005904

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000934:	2101      	movs	r1, #1
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f80d 	bl	8000956 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6858      	ldr	r0, [r3, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	2201      	movs	r2, #1
 8000948:	4619      	mov	r1, r3
 800094a:	f001 feb4 	bl	80026b6 <HAL_GPIO_WritePin>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6958      	ldr	r0, [r3, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	b299      	uxth	r1, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	bf0c      	ite	eq
 8000970:	2301      	moveq	r3, #1
 8000972:	2300      	movne	r3, #0
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	f001 fe9d 	bl	80026b6 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800098c:	2101      	movs	r1, #1
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ffe1 	bl	8000956 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6858      	ldr	r0, [r3, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	f001 fe88 	bl	80026b6 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f000 f855 	bl	8000a56 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6858      	ldr	r0, [r3, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	f001 fe7c 	bl	80026b6 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80009be:	2064      	movs	r0, #100	; 0x64
 80009c0:	f000 f849 	bl	8000a56 <SX1278_hw_DelayMs>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffbb 	bl	8000956 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6998      	ldr	r0, [r3, #24]
 80009e4:	1cf9      	adds	r1, r7, #3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	2201      	movs	r2, #1
 80009ec:	f003 f8ae 	bl	8003b4c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80009f0:	bf00      	nop
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 fb86 	bl	8004108 <HAL_SPI_GetState>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d1f7      	bne.n	80009f2 <SX1278_hw_SPICommand+0x26>
		;
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af02      	add	r7, sp, #8
 8000a10:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000a16:	2300      	movs	r3, #0
 8000a18:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff9a 	bl	8000956 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6998      	ldr	r0, [r3, #24]
 8000a26:	f107 020e 	add.w	r2, r7, #14
 8000a2a:	f107 010f 	add.w	r1, r7, #15
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	f003 f9c5 	bl	8003dc4 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000a3a:	bf00      	nop
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 fb61 	bl	8004108 <HAL_SPI_GetState>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d1f7      	bne.n	8000a3c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f001 fb88 	bl	8002174 <HAL_Delay>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f001 fe01 	bl	8002688 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	78fa      	ldrb	r2, [r7, #3]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff8c 	bl	80009cc <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffa6 	bl	8000a0a <SX1278_hw_SPIReadByte>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff44 	bl	8000956 <SX1278_hw_SetNSS>
	return tmp;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff31 	bl	8000956 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4619      	mov	r1, r3
 8000b02:	4610      	mov	r0, r2
 8000b04:	f7ff ff62 	bl	80009cc <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	78ba      	ldrb	r2, [r7, #2]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff5b 	bl	80009cc <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff1a 	bl	8000956 <SX1278_hw_SetNSS>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 8000b2a:	b590      	push	{r4, r7, lr}
 8000b2c:	b087      	sub	sp, #28
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	461a      	mov	r2, r3
 8000b36:	460b      	mov	r3, r1
 8000b38:	72fb      	strb	r3, [r7, #11]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000b3e:	7abb      	ldrb	r3, [r7, #10]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d927      	bls.n	8000b94 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff03 	bl	8000956 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	7afa      	ldrb	r2, [r7, #11]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff37 	bl	80009cc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	75fb      	strb	r3, [r7, #23]
 8000b62:	e00c      	b.n	8000b7e <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6819      	ldr	r1, [r3, #0]
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	18d4      	adds	r4, r2, r3
 8000b6e:	4608      	mov	r0, r1
 8000b70:	f7ff ff4b 	bl	8000a0a <SX1278_hw_SPIReadByte>
 8000b74:	4603      	mov	r3, r0
 8000b76:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	75fb      	strb	r3, [r7, #23]
 8000b7e:	7dfa      	ldrb	r2, [r7, #23]
 8000b80:	7abb      	ldrb	r3, [r7, #10]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d3ee      	bcc.n	8000b64 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fee2 	bl	8000956 <SX1278_hw_SetNSS>
 8000b92:	e000      	b.n	8000b96 <SX1278_SPIBurstRead+0x6c>
		return;
 8000b94:	bf00      	nop
	}
}
 8000b96:	371c      	adds	r7, #28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd90      	pop	{r4, r7, pc}

08000b9c <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	460b      	mov	r3, r1
 8000baa:	72fb      	strb	r3, [r7, #11]
 8000bac:	4613      	mov	r3, r2
 8000bae:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000bb0:	7abb      	ldrb	r3, [r7, #10]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d929      	bls.n	8000c0a <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff feca 	bl	8000956 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	7afb      	ldrb	r3, [r7, #11]
 8000bc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	f7ff fefb 	bl	80009cc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	75fb      	strb	r3, [r7, #23]
 8000bda:	e00b      	b.n	8000bf4 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f7ff feef 	bl	80009cc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	75fb      	strb	r3, [r7, #23]
 8000bf4:	7dfa      	ldrb	r2, [r7, #23]
 8000bf6:	7abb      	ldrb	r3, [r7, #10]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d3ef      	bcc.n	8000bdc <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fea7 	bl	8000956 <SX1278_hw_SetNSS>
 8000c08:	e000      	b.n	8000c0c <SX1278_SPIBurstWrite+0x70>
		return;
 8000c0a:	bf00      	nop
	}
}
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af02      	add	r7, sp, #8
 8000c18:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7919      	ldrb	r1, [r3, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	795a      	ldrb	r2, [r3, #5]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7998      	ldrb	r0, [r3, #6]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	79db      	ldrb	r3, [r3, #7]
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f804 	bl	8000c3c <SX1278_config>
			module->LoRa_BW);
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	4608      	mov	r0, r1
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	70fb      	strb	r3, [r7, #3]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	70bb      	strb	r3, [r7, #2]
 8000c52:	4613      	mov	r3, r2
 8000c54:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 f8aa 	bl	8000db0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000c5c:	200f      	movs	r0, #15
 8000c5e:	f7ff fefa 	bl	8000a56 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f000 f8b4 	bl	8000dd0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8000c68:	78fa      	ldrb	r2, [r7, #3]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a43      	ldr	r2, [pc, #268]	; (8000d80 <SX1278_config+0x144>)
 8000c72:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000c74:	2303      	movs	r3, #3
 8000c76:	2106      	movs	r1, #6
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff8f 	bl	8000b9c <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8000c7e:	78bb      	ldrb	r3, [r7, #2]
 8000c80:	4a40      	ldr	r2, [pc, #256]	; (8000d84 <SX1278_config+0x148>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	461a      	mov	r2, r3
 8000c86:	2109      	movs	r1, #9
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff25 	bl	8000ad8 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000c8e:	220b      	movs	r2, #11
 8000c90:	210b      	movs	r1, #11
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff20 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000c98:	2223      	movs	r2, #35	; 0x23
 8000c9a:	210c      	movs	r1, #12
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff1b 	bl	8000ad8 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8000ca2:	787b      	ldrb	r3, [r7, #1]
 8000ca4:	4a38      	ldr	r2, [pc, #224]	; (8000d88 <SX1278_config+0x14c>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	2b06      	cmp	r3, #6
 8000caa:	d131      	bne.n	8000d10 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000cac:	7e3b      	ldrb	r3, [r7, #24]
 8000cae:	4a37      	ldr	r2, [pc, #220]	; (8000d8c <SX1278_config+0x150>)
 8000cb0:	5cd3      	ldrb	r3, [r2, r3]
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000cb6:	3309      	adds	r3, #9
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	211d      	movs	r1, #29
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff0a 	bl	8000ad8 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000cc4:	787b      	ldrb	r3, [r7, #1]
 8000cc6:	4a30      	ldr	r2, [pc, #192]	; (8000d88 <SX1278_config+0x14c>)
 8000cc8:	5cd3      	ldrb	r3, [r2, r3]
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000cce:	3307      	adds	r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	211e      	movs	r1, #30
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fefe 	bl	8000ad8 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000cdc:	2131      	movs	r1, #49	; 0x31
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fedb 	bl	8000a9a <SX1278_SPIRead>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f023 0307 	bic.w	r3, r3, #7
 8000cee:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f043 0305 	orr.w	r3, r3, #5
 8000cf6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2131      	movs	r1, #49	; 0x31
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff feea 	bl	8000ad8 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000d04:	220c      	movs	r2, #12
 8000d06:	2137      	movs	r1, #55	; 0x37
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fee5 	bl	8000ad8 <SX1278_SPIWrite>
 8000d0e:	e017      	b.n	8000d40 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000d10:	7e3b      	ldrb	r3, [r7, #24]
 8000d12:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <SX1278_config+0x150>)
 8000d14:	5cd3      	ldrb	r3, [r2, r3]
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	211d      	movs	r1, #29
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fed8 	bl	8000ad8 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000d28:	787b      	ldrb	r3, [r7, #1]
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <SX1278_config+0x14c>)
 8000d2c:	5cd3      	ldrb	r3, [r2, r3]
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000d32:	3307      	adds	r3, #7
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	211e      	movs	r1, #30
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fecc 	bl	8000ad8 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000d40:	22ff      	movs	r2, #255	; 0xff
 8000d42:	211f      	movs	r1, #31
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fec7 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fec2 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8000d54:	220c      	movs	r2, #12
 8000d56:	2121      	movs	r1, #33	; 0x21
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff febd 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2141      	movs	r1, #65	; 0x41
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff feb8 	bl	8000ad8 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 f80d 	bl	8000d90 <SX1278_standby>
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	08005948 	.word	0x08005948
 8000d84:	0800594c 	.word	0x0800594c
 8000d88:	08005954 	.word	0x08005954
 8000d8c:	0800595c 	.word	0x0800595c

08000d90 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000d98:	2209      	movs	r2, #9
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fe9b 	bl	8000ad8 <SX1278_SPIWrite>
	module->status = STANDBY;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	725a      	strb	r2, [r3, #9]
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000db8:	2208      	movs	r2, #8
 8000dba:	2101      	movs	r1, #1
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fe8b 	bl	8000ad8 <SX1278_SPIWrite>
	module->status = SLEEP;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	725a      	strb	r2, [r3, #9]
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000dd8:	2288      	movs	r2, #136	; 0x88
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fe7b 	bl	8000ad8 <SX1278_SPIWrite>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000df2:	22ff      	movs	r2, #255	; 0xff
 8000df4:	2112      	movs	r1, #18
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fe6e 	bl	8000ad8 <SX1278_SPIWrite>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	7afa      	ldrb	r2, [r7, #11]
 8000e16:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f7ff fefa 	bl	8000c12 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000e1e:	2284      	movs	r2, #132	; 0x84
 8000e20:	214d      	movs	r1, #77	; 0x4d
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f7ff fe58 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000e28:	22ff      	movs	r2, #255	; 0xff
 8000e2a:	2124      	movs	r1, #36	; 0x24
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f7ff fe53 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000e32:	2201      	movs	r2, #1
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f7ff fe4e 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000e3c:	223f      	movs	r2, #63	; 0x3f
 8000e3e:	2111      	movs	r1, #17
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fe49 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff ffcf 	bl	8000dea <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000e4c:	7afb      	ldrb	r3, [r7, #11]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2122      	movs	r1, #34	; 0x22
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f7ff fe40 	bl	8000ad8 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000e58:	210f      	movs	r1, #15
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff fe1d 	bl	8000a9a <SX1278_SPIRead>
 8000e60:	4603      	mov	r3, r0
 8000e62:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	461a      	mov	r2, r3
 8000e68:	210d      	movs	r1, #13
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f7ff fe34 	bl	8000ad8 <SX1278_SPIWrite>
//	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
	SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
 8000e70:	2205      	movs	r2, #5
 8000e72:	2101      	movs	r1, #1
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f7ff fe2f 	bl	8000ad8 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000e82:	2118      	movs	r1, #24
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f7ff fe08 	bl	8000a9a <SX1278_SPIRead>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d104      	bne.n	8000e9e <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2203      	movs	r2, #3
 8000e98:	725a      	strb	r2, [r3, #9]
			return 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e013      	b.n	8000ec6 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d109      	bne.n	8000ebe <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fd68 	bl	8000984 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff feac 	bl	8000c12 <SX1278_defaultConfig>
			return 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e003      	b.n	8000ec6 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fdc9 	bl	8000a56 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000ec4:	e7dd      	b.n	8000e82 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

//	if (SX1278_hw_GetDIO0(module->hw)) {
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	330a      	adds	r3, #10
 8000eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 f8fe 	bl	80050e2 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff fdd6 	bl	8000a9a <SX1278_SPIRead>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	210d      	movs	r1, #13
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fded 	bl	8000ad8 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	799b      	ldrb	r3, [r3, #6]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <SX1278_LoRaRxPacket+0x40>
			packet_size = module->packetLength;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7a1b      	ldrb	r3, [r3, #8]
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e005      	b.n	8000f1a <SX1278_LoRaRxPacket+0x4c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000f0e:	2113      	movs	r1, #19
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fdc2 	bl	8000a9a <SX1278_SPIRead>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f103 020a 	add.w	r2, r3, #10
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2100      	movs	r1, #0
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fe00 	bl	8000b2a <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ff59 	bl	8000dea <SX1278_clearLoRaIrq>
//	}
	return module->readBytes;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	7afa      	ldrb	r2, [r7, #11]
 8000f58:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f7ff fe59 	bl	8000c12 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Tx for 20dBm 0x87
 8000f60:	2284      	movs	r2, #132	; 0x84
 8000f62:	214d      	movs	r1, #77	; 0x4d
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f7ff fdb7 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2124      	movs	r1, #36	; 0x24
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff fdb2 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000f74:	2241      	movs	r2, #65	; 0x41
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff fdad 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f7ff ff33 	bl	8000dea <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000f84:	22f7      	movs	r2, #247	; 0xf7
 8000f86:	2111      	movs	r1, #17
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f7ff fda5 	bl	8000ad8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	461a      	mov	r2, r3
 8000f92:	2122      	movs	r1, #34	; 0x22
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fd9f 	bl	8000ad8 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000f9a:	210e      	movs	r1, #14
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff fd7c 	bl	8000a9a <SX1278_SPIRead>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	210d      	movs	r1, #13
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff fd93 	bl	8000ad8 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000fb2:	2122      	movs	r1, #34	; 0x22
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff fd70 	bl	8000a9a <SX1278_SPIRead>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000fbe:	7dba      	ldrb	r2, [r7, #22]
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d104      	bne.n	8000fd0 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	725a      	strb	r2, [r3, #9]
			return 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e00e      	b.n	8000fee <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1ea      	bne.n	8000fb2 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fccf 	bl	8000984 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff fe13 	bl	8000c12 <SX1278_defaultConfig>
			return 0;
 8000fec:	2300      	movs	r3, #0
		}
	}
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4613      	mov	r3, r2
 8001004:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	2100      	movs	r1, #0
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff fdc5 	bl	8000b9c <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001012:	228b      	movs	r2, #139	; 0x8b
 8001014:	2101      	movs	r1, #1
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff fd5e 	bl	8000ad8 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fd23 	bl	8000a6c <SX1278_hw_GetDIO0>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00b      	beq.n	8001044 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800102c:	2112      	movs	r1, #18
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f7ff fd33 	bl	8000a9a <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f7ff fed8 	bl	8000dea <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff fea8 	bl	8000d90 <SX1278_standby>
			return 1;
 8001040:	2301      	movs	r3, #1
 8001042:	e013      	b.n	800106c <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	3b01      	subs	r3, #1
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d109      	bne.n	8001064 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fc95 	bl	8000984 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fdd9 	bl	8000c12 <SX1278_defaultConfig>
			return 0;
 8001060:	2300      	movs	r3, #0
 8001062:	e003      	b.n	800106c <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff fcf6 	bl	8000a56 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800106a:	e7d7      	b.n	800101c <SX1278_LoRaTxPacket+0x26>
	}
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	461a      	mov	r2, r3
 8001082:	4603      	mov	r3, r0
 8001084:	70fb      	strb	r3, [r7, #3]
 8001086:	460b      	mov	r3, r1
 8001088:	70bb      	strb	r3, [r7, #2]
 800108a:	4613      	mov	r3, r2
 800108c:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fc4a 	bl	800092c <SX1278_hw_init>
	module->frequency = frequency;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	78fa      	ldrb	r2, [r7, #3]
 800109c:	711a      	strb	r2, [r3, #4]
	module->power = power;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	78ba      	ldrb	r2, [r7, #2]
 80010a2:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	787a      	ldrb	r2, [r7, #1]
 80010a8:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7d3a      	ldrb	r2, [r7, #20]
 80010b4:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fdab 	bl	8000c12 <SX1278_defaultConfig>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d003      	beq.n	80010e6 <SX1278_read+0x22>
		length = module->readBytes;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80010e4:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	330a      	adds	r3, #10
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	4619      	mov	r1, r3
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	f003 ffec 	bl	80050cc <memcpy>
	rxBuf[length] = '\0';
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	4413      	add	r3, r2
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8001106:	79fb      	ldrb	r3, [r7, #7]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_GPIO_Init+0xdc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a30      	ldr	r2, [pc, #192]	; (80011ec <MX_GPIO_Init+0xdc>)
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_GPIO_Init+0xdc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_GPIO_Init+0xdc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <MX_GPIO_Init+0xdc>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_GPIO_Init+0xdc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_GPIO_Init+0xdc>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a24      	ldr	r2, [pc, #144]	; (80011ec <MX_GPIO_Init+0xdc>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <MX_GPIO_Init+0xdc>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|TRIG_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 7106 	mov.w	r1, #536	; 0x218
 8001172:	481f      	ldr	r0, [pc, #124]	; (80011f0 <MX_GPIO_Init+0xe0>)
 8001174:	f001 fa9f 	bl	80026b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2120      	movs	r1, #32
 800117c:	481d      	ldr	r0, [pc, #116]	; (80011f4 <MX_GPIO_Init+0xe4>)
 800117e:	f001 fa9a 	bl	80026b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001182:	2304      	movs	r3, #4
 8001184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_GPIO_Init+0xe8>)
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	4816      	ldr	r0, [pc, #88]	; (80011f0 <MX_GPIO_Init+0xe0>)
 8001196:	f001 f91d 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin|TRIG_Pin;
 800119a:	f44f 7306 	mov.w	r3, #536	; 0x218
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4619      	mov	r1, r3
 80011b2:	480f      	ldr	r0, [pc, #60]	; (80011f0 <MX_GPIO_Init+0xe0>)
 80011b4:	f001 f90e 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b8:	2320      	movs	r3, #32
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <MX_GPIO_Init+0xe4>)
 80011d0:	f001 f900 	bl	80023d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2008      	movs	r0, #8
 80011da:	f001 f8c4 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011de:	2008      	movs	r0, #8
 80011e0:	f001 f8dd 	bl	800239e <HAL_NVIC_EnableIRQ>

}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	10110000 	.word	0x10110000

080011fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_I2C1_Init+0x50>)
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <MX_I2C1_Init+0x54>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_I2C1_Init+0x50>)
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_I2C1_Init+0x58>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_I2C1_Init+0x50>)
 800121a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_I2C1_Init+0x50>)
 800123a:	f001 fa8f 	bl	800275c <HAL_I2C_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001244:	f000 fa62 	bl	800170c <Error_Handler>
  }

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200004c8 	.word	0x200004c8
 8001250:	40005400 	.word	0x40005400
 8001254:	00061a80 	.word	0x00061a80

08001258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <HAL_I2C_MspInit+0x70>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d123      	bne.n	80012c0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_I2C_MspInit+0x74>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_I2C_MspInit+0x74>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_I2C_MspInit+0x74>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001290:	23c0      	movs	r3, #192	; 0xc0
 8001292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001294:	2312      	movs	r3, #18
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4619      	mov	r1, r3
 80012a2:	480b      	ldr	r0, [pc, #44]	; (80012d0 <HAL_I2C_MspInit+0x78>)
 80012a4:	f001 f896 	bl	80023d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_I2C_MspInit+0x74>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_I2C_MspInit+0x74>)
 80012ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b2:	61d3      	str	r3, [r2, #28]
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_I2C_MspInit+0x74>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40005400 	.word	0x40005400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010c00 	.word	0x40010c00

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012da:	f000 fee9 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012de:	f000 f8ed 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e2:	f7ff ff15 	bl	8001110 <MX_GPIO_Init>
  MX_TIM1_Init();
 80012e6:	f000 fe01 	bl	8001eec <MX_TIM1_Init>
  MX_I2C1_Init();
 80012ea:	f7ff ff87 	bl	80011fc <MX_I2C1_Init>
  MX_SPI1_Init();
 80012ee:	f000 fa13 	bl	8001718 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80012f2:	2100      	movs	r1, #0
 80012f4:	4860      	ldr	r0, [pc, #384]	; (8001478 <main+0x1a4>)
 80012f6:	f003 f863 	bl	80043c0 <HAL_TIM_IC_Start_IT>
  SSD1306_Init ();
 80012fa:	f000 fa8d 	bl	8001818 <SSD1306_Init>

  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80012fe:	4b5f      	ldr	r3, [pc, #380]	; (800147c <main+0x1a8>)
 8001300:	4a5f      	ldr	r2, [pc, #380]	; (8001480 <main+0x1ac>)
 8001302:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8001304:	4b5d      	ldr	r3, [pc, #372]	; (800147c <main+0x1a8>)
 8001306:	2204      	movs	r2, #4
 8001308:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <main+0x1a8>)
 800130c:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <main+0x1ac>)
 800130e:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8001310:	4b5a      	ldr	r3, [pc, #360]	; (800147c <main+0x1a8>)
 8001312:	2210      	movs	r2, #16
 8001314:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8001316:	4b59      	ldr	r3, [pc, #356]	; (800147c <main+0x1a8>)
 8001318:	4a59      	ldr	r2, [pc, #356]	; (8001480 <main+0x1ac>)
 800131a:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 800131c:	4b57      	ldr	r3, [pc, #348]	; (800147c <main+0x1a8>)
 800131e:	2208      	movs	r2, #8
 8001320:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <main+0x1a8>)
 8001324:	4a57      	ldr	r2, [pc, #348]	; (8001484 <main+0x1b0>)
 8001326:	619a      	str	r2, [r3, #24]
  SX1278.hw = &SX1278_hw;
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <main+0x1b4>)
 800132a:	4a54      	ldr	r2, [pc, #336]	; (800147c <main+0x1a8>)
 800132c:	601a      	str	r2, [r3, #0]
  SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_10DBM, SX1278_LORA_SF_10,
 800132e:	230a      	movs	r3, #10
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2308      	movs	r3, #8
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2304      	movs	r3, #4
 8001338:	2204      	movs	r2, #4
 800133a:	2100      	movs	r1, #0
 800133c:	4852      	ldr	r0, [pc, #328]	; (8001488 <main+0x1b4>)
 800133e:	f7ff fe99 	bl	8001074 <SX1278_begin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SX1278_LoRaEntryRx(&SX1278,16, 2000);
 8001342:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001346:	2110      	movs	r1, #16
 8001348:	484f      	ldr	r0, [pc, #316]	; (8001488 <main+0x1b4>)
 800134a:	f7ff fd5b 	bl	8000e04 <SX1278_LoRaEntryRx>
  while (1)
  {

	if(flag == 1){
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <main+0x1b8>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	f040 8087 	bne.w	8001466 <main+0x192>

      for(int i = 0; i<5;i++){
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	e007      	b.n	800136e <main+0x9a>
		read_SR04();
 800135e:	f000 f901 	bl	8001564 <read_SR04>
//		sum_distance = sum_distance + distance;
		HAL_Delay(70);
 8001362:	2046      	movs	r0, #70	; 0x46
 8001364:	f000 ff06 	bl	8002174 <HAL_Delay>
      for(int i = 0; i<5;i++){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3301      	adds	r3, #1
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b04      	cmp	r3, #4
 8001372:	ddf4      	ble.n	800135e <main+0x8a>
      }
//      distance = sum_distance/3 ;
//      sum_distance=0;
	  if (distance < 100){
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <main+0x1bc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b63      	cmp	r3, #99	; 0x63
 800137a:	d80d      	bhi.n	8001398 <main+0xc4>
		  sprintf(t,"%d",distance);
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <main+0x1bc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4944      	ldr	r1, [pc, #272]	; (8001494 <main+0x1c0>)
 8001384:	4844      	ldr	r0, [pc, #272]	; (8001498 <main+0x1c4>)
 8001386:	f003 feb5 	bl	80050f4 <siprintf>
		  t[2]=' ';
 800138a:	4b43      	ldr	r3, [pc, #268]	; (8001498 <main+0x1c4>)
 800138c:	2220      	movs	r2, #32
 800138e:	709a      	strb	r2, [r3, #2]
		  t[3]=' ';
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <main+0x1c4>)
 8001392:	2220      	movs	r2, #32
 8001394:	70da      	strb	r2, [r3, #3]
 8001396:	e01a      	b.n	80013ce <main+0xfa>
	  }else if(distance >=100 && distance < 1000){
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <main+0x1bc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b63      	cmp	r3, #99	; 0x63
 800139e:	d90f      	bls.n	80013c0 <main+0xec>
 80013a0:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <main+0x1bc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a8:	d20a      	bcs.n	80013c0 <main+0xec>
		  sprintf(t,"%d",distance);
 80013aa:	4b39      	ldr	r3, [pc, #228]	; (8001490 <main+0x1bc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4938      	ldr	r1, [pc, #224]	; (8001494 <main+0x1c0>)
 80013b2:	4839      	ldr	r0, [pc, #228]	; (8001498 <main+0x1c4>)
 80013b4:	f003 fe9e 	bl	80050f4 <siprintf>
		  t[3]=' ';
 80013b8:	4b37      	ldr	r3, [pc, #220]	; (8001498 <main+0x1c4>)
 80013ba:	2220      	movs	r2, #32
 80013bc:	70da      	strb	r2, [r3, #3]
 80013be:	e006      	b.n	80013ce <main+0xfa>
	  }else {
		  sprintf(t,"%d",distance);
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <main+0x1bc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4933      	ldr	r1, [pc, #204]	; (8001494 <main+0x1c0>)
 80013c8:	4833      	ldr	r0, [pc, #204]	; (8001498 <main+0x1c4>)
 80013ca:	f003 fe93 	bl	80050f4 <siprintf>
	  }

	  SSD1306_GotoXY (10,10);  // goto 10, 10
 80013ce:	210a      	movs	r1, #10
 80013d0:	200a      	movs	r0, #10
 80013d2:	f000 fb89 	bl	8001ae8 <SSD1306_GotoXY>
	  SSD1306_Puts ("Distance", &Font_11x18, 1);  // print Hello
 80013d6:	2201      	movs	r2, #1
 80013d8:	4930      	ldr	r1, [pc, #192]	; (800149c <main+0x1c8>)
 80013da:	4831      	ldr	r0, [pc, #196]	; (80014a0 <main+0x1cc>)
 80013dc:	f000 fc1a 	bl	8001c14 <SSD1306_Puts>
	  SSD1306_GotoXY (30, 30);
 80013e0:	211e      	movs	r1, #30
 80013e2:	201e      	movs	r0, #30
 80013e4:	f000 fb80 	bl	8001ae8 <SSD1306_GotoXY>
	  SSD1306_Puts (t, &Font_16x26, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	492e      	ldr	r1, [pc, #184]	; (80014a4 <main+0x1d0>)
 80013ec:	482a      	ldr	r0, [pc, #168]	; (8001498 <main+0x1c4>)
 80013ee:	f000 fc11 	bl	8001c14 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80013f2:	f000 fad5 	bl	80019a0 <SSD1306_UpdateScreen>
	  HAL_Delay(4000);
 80013f6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80013fa:	f000 febb 	bl	8002174 <HAL_Delay>
	  message_length = sprintf(buffsent, "WL:%d", distance);
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <main+0x1bc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	4928      	ldr	r1, [pc, #160]	; (80014a8 <main+0x1d4>)
 8001406:	4829      	ldr	r0, [pc, #164]	; (80014ac <main+0x1d8>)
 8001408:	f003 fe74 	bl	80050f4 <siprintf>
 800140c:	4602      	mov	r2, r0
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <main+0x1dc>)
 8001410:	601a      	str	r2, [r3, #0]

	  for(int i =0; i < 3; i++){
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	e01a      	b.n	800144e <main+0x17a>
		  ret_sent = SX1278_LoRaEntryTx(&SX1278, message_length, 1000);
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <main+0x1dc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001422:	4619      	mov	r1, r3
 8001424:	4818      	ldr	r0, [pc, #96]	; (8001488 <main+0x1b4>)
 8001426:	f7ff fd8e 	bl	8000f46 <SX1278_LoRaEntryTx>
 800142a:	4602      	mov	r2, r0
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <main+0x1e0>)
 800142e:	601a      	str	r2, [r3, #0]
		  ret_sent = SX1278_LoRaTxPacket(&SX1278, (uint8_t* )buffsent, message_length,1000);
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <main+0x1dc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	491c      	ldr	r1, [pc, #112]	; (80014ac <main+0x1d8>)
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <main+0x1b4>)
 800143e:	f7ff fdda 	bl	8000ff6 <SX1278_LoRaTxPacket>
 8001442:	4602      	mov	r2, r0
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <main+0x1e0>)
 8001446:	601a      	str	r2, [r3, #0]
	  for(int i =0; i < 3; i++){
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2b02      	cmp	r3, #2
 8001452:	dde1      	ble.n	8001418 <main+0x144>
	  }
	  SX1278_LoRaEntryRx(&SX1278,16, 1000);
 8001454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001458:	2110      	movs	r1, #16
 800145a:	480b      	ldr	r0, [pc, #44]	; (8001488 <main+0x1b4>)
 800145c:	f7ff fcd2 	bl	8000e04 <SX1278_LoRaEntryRx>
	  flag = 0;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <main+0x1b8>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	}// end if
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001466:	2120      	movs	r1, #32
 8001468:	4813      	ldr	r0, [pc, #76]	; (80014b8 <main+0x1e4>)
 800146a:	f001 f93c 	bl	80026e6 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 800146e:	20c8      	movs	r0, #200	; 0xc8
 8001470:	f000 fe80 	bl	8002174 <HAL_Delay>
	if(flag == 1){
 8001474:	e76b      	b.n	800134e <main+0x7a>
 8001476:	bf00      	nop
 8001478:	20000738 	.word	0x20000738
 800147c:	200006c0 	.word	0x200006c0
 8001480:	40010800 	.word	0x40010800
 8001484:	200006e0 	.word	0x200006e0
 8001488:	200005ac 	.word	0x200005ac
 800148c:	200000b0 	.word	0x200000b0
 8001490:	200000ac 	.word	0x200000ac
 8001494:	0800591c 	.word	0x0800591c
 8001498:	2000051c 	.word	0x2000051c
 800149c:	20000000 	.word	0x20000000
 80014a0:	08005920 	.word	0x08005920
 80014a4:	20000008 	.word	0x20000008
 80014a8:	0800592c 	.word	0x0800592c
 80014ac:	20000528 	.word	0x20000528
 80014b0:	20000520 	.word	0x20000520
 80014b4:	20000524 	.word	0x20000524
 80014b8:	40010c00 	.word	0x40010c00

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b090      	sub	sp, #64	; 0x40
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0318 	add.w	r3, r7, #24
 80014c6:	2228      	movs	r2, #40	; 0x28
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 fe09 	bl	80050e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e2:	2301      	movs	r3, #1
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e6:	2310      	movs	r3, #16
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ee:	f107 0318 	add.w	r3, r7, #24
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fe9e 	bl	8003234 <HAL_RCC_OscConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014fe:	f000 f905 	bl	800170c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001502:	230f      	movs	r3, #15
 8001504:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f002 f90a 	bl	8003734 <HAL_RCC_ClockConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001526:	f000 f8f1 	bl	800170c <Error_Handler>
  }
}
 800152a:	bf00      	nop
 800152c:	3740      	adds	r7, #64	; 0x40
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint16_t us){
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <delay_us+0x2c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<us);
 8001546:	bf00      	nop
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <delay_us+0x2c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3f9      	bcc.n	8001548 <delay_us+0x14>
}// end void delay_us ()
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000738 	.word	0x20000738

08001564 <read_SR04>:


void read_SR04(){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800156e:	480f      	ldr	r0, [pc, #60]	; (80015ac <read_SR04+0x48>)
 8001570:	f001 f8a1 	bl	80026b6 <HAL_GPIO_WritePin>
		delay_us(2);
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff ffdd 	bl	8001534 <delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <read_SR04+0x48>)
 8001582:	f001 f898 	bl	80026b6 <HAL_GPIO_WritePin>
		delay_us(10);
 8001586:	200a      	movs	r0, #10
 8001588:	f7ff ffd4 	bl	8001534 <delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <read_SR04+0x48>)
 8001594:	f001 f88f 	bl	80026b6 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <read_SR04+0x4c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <read_SR04+0x4c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0202 	orr.w	r2, r2, #2
 80015a6:	60da      	str	r2, [r3, #12]


}// end read_SR04
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40010800 	.word	0x40010800
 80015b0:	20000738 	.word	0x20000738
 80015b4:	00000000 	.word	0x00000000

080015b8 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim){
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1 ){
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7f1b      	ldrb	r3, [r3, #28]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	f040 808b 	bne.w	80016e0 <HAL_TIM_IC_CaptureCallback+0x128>
		if(is_fist_capture == 0){
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d11a      	bne.n	8001608 <HAL_TIM_IC_CaptureCallback+0x50>
			cap1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80015d2:	2100      	movs	r1, #0
 80015d4:	4847      	ldr	r0, [pc, #284]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015d6:	f003 fa4d 	bl	8004a74 <HAL_TIM_ReadCapturedValue>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 80015de:	601a      	str	r2, [r3, #0]
			is_fist_capture = 1;
 80015e0:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim1,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 80015e6:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 020a 	bic.w	r2, r2, #10
 80015f4:	621a      	str	r2, [r3, #32]
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a1a      	ldr	r2, [r3, #32]
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0202 	orr.w	r2, r2, #2
 8001604:	621a      	str	r2, [r3, #32]
		 __HAL_TIM_SET_CAPTUREPOLARITY(&htim1,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
		 __HAL_TIM_DISABLE_IT(&htim1,TIM_IT_CC1);
		}// end else if
	}// end if

}// end HAL_TIM_IC_CaptureCallback
 8001606:	e06b      	b.n	80016e0 <HAL_TIM_IC_CaptureCallback+0x128>
		}else if(is_fist_capture == 1){
 8001608:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d167      	bne.n	80016e0 <HAL_TIM_IC_CaptureCallback+0x128>
			cap2 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8001610:	2100      	movs	r1, #0
 8001612:	4838      	ldr	r0, [pc, #224]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001614:	f003 fa2e 	bl	8004a74 <HAL_TIM_ReadCapturedValue>
 8001618:	4602      	mov	r2, r0
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 800161c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 800161e:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
			if(cap2 > cap1){
 8001626:	4b35      	ldr	r3, [pc, #212]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d907      	bls.n	8001642 <HAL_TIM_IC_CaptureCallback+0x8a>
				diff = cap2 - cap1;
 8001632:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a30      	ldr	r2, [pc, #192]	; (8001700 <HAL_TIM_IC_CaptureCallback+0x148>)
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e00f      	b.n	8001662 <HAL_TIM_IC_CaptureCallback+0xaa>
			}else if (cap1 > cap2){
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d909      	bls.n	8001662 <HAL_TIM_IC_CaptureCallback+0xaa>
				diff = (0xffff - cap1) + cap2;
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800165c:	33ff      	adds	r3, #255	; 0xff
 800165e:	4a28      	ldr	r2, [pc, #160]	; (8001700 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001660:	6013      	str	r3, [r2, #0]
			distance = (diff*0.343)/2 + 20;
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe feb4 	bl	80003d4 <__aeabi_ui2d>
 800166c:	a31e      	add	r3, pc, #120	; (adr r3, 80016e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ff29 	bl	80004c8 <__aeabi_dmul>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	4618      	mov	r0, r3
 800167c:	4621      	mov	r1, r4
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001686:	f7ff f849 	bl	800071c <__aeabi_ddiv>
 800168a:	4603      	mov	r3, r0
 800168c:	460c      	mov	r4, r1
 800168e:	4618      	mov	r0, r3
 8001690:	4621      	mov	r1, r4
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001698:	f7fe fd60 	bl	800015c <__adddf3>
 800169c:	4603      	mov	r3, r0
 800169e:	460c      	mov	r4, r1
 80016a0:	4618      	mov	r0, r3
 80016a2:	4621      	mov	r1, r4
 80016a4:	f7ff f922 	bl	80008ec <__aeabi_d2uiz>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_TIM_IC_CaptureCallback+0x150>)
 80016ac:	601a      	str	r2, [r3, #0]
		 is_fist_capture = 0;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
		 __HAL_TIM_SET_CAPTUREPOLARITY(&htim1,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 020a 	bic.w	r2, r2, #10
 80016c2:	621a      	str	r2, [r3, #32]
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a12      	ldr	r2, [r2, #32]
 80016ce:	621a      	str	r2, [r3, #32]
		 __HAL_TIM_DISABLE_IT(&htim1,TIM_IT_CC1);
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0202 	bic.w	r2, r2, #2
 80016de:	60da      	str	r2, [r3, #12]
}// end HAL_TIM_IC_CaptureCallback
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	45a1cac1 	.word	0x45a1cac1
 80016ec:	3fd5f3b6 	.word	0x3fd5f3b6
 80016f0:	200000a8 	.word	0x200000a8
 80016f4:	20000738 	.word	0x20000738
 80016f8:	2000009c 	.word	0x2000009c
 80016fc:	200000a0 	.word	0x200000a0
 8001700:	200000a4 	.word	0x200000a4
 8001704:	40340000 	.word	0x40340000
 8001708:	200000ac 	.word	0x200000ac

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_SPI1_Init+0x64>)
 800171e:	4a18      	ldr	r2, [pc, #96]	; (8001780 <MX_SPI1_Init+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_SPI1_Init+0x64>)
 8001724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_SPI1_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_SPI1_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_SPI1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_SPI1_Init+0x64>)
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001748:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_SPI1_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <MX_SPI1_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_SPI1_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <MX_SPI1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_SPI1_Init+0x64>)
 8001764:	220a      	movs	r2, #10
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <MX_SPI1_Init+0x64>)
 800176a:	f002 f96b 	bl	8003a44 <HAL_SPI_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001774:	f7ff ffca 	bl	800170c <Error_Handler>
  }

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200006e0 	.word	0x200006e0
 8001780:	40013000 	.word	0x40013000

08001784 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_SPI_MspInit+0x88>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d12f      	bne.n	8001804 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_SPI_MspInit+0x8c>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <HAL_SPI_MspInit+0x8c>)
 80017aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_SPI_MspInit+0x8c>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_SPI_MspInit+0x8c>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a13      	ldr	r2, [pc, #76]	; (8001810 <HAL_SPI_MspInit+0x8c>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_SPI_MspInit+0x8c>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017d4:	23a0      	movs	r3, #160	; 0xa0
 80017d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4619      	mov	r1, r3
 80017e6:	480b      	ldr	r0, [pc, #44]	; (8001814 <HAL_SPI_MspInit+0x90>)
 80017e8:	f000 fdf4 	bl	80023d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ec:	2340      	movs	r3, #64	; 0x40
 80017ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4619      	mov	r1, r3
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_SPI_MspInit+0x90>)
 8001800:	f000 fde8 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001804:	bf00      	nop
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40013000 	.word	0x40013000
 8001810:	40021000 	.word	0x40021000
 8001814:	40010800 	.word	0x40010800

08001818 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800181e:	f000 fa1f 	bl	8001c60 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001822:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001826:	2201      	movs	r2, #1
 8001828:	2178      	movs	r1, #120	; 0x78
 800182a:	485b      	ldr	r0, [pc, #364]	; (8001998 <SSD1306_Init+0x180>)
 800182c:	f001 f9cc 	bl	8002bc8 <HAL_I2C_IsDeviceReady>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001836:	2300      	movs	r3, #0
 8001838:	e0a9      	b.n	800198e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800183a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800183e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001840:	e002      	b.n	8001848 <SSD1306_Init+0x30>
		p--;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3b01      	subs	r3, #1
 8001846:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800184e:	22ae      	movs	r2, #174	; 0xae
 8001850:	2100      	movs	r1, #0
 8001852:	2078      	movs	r0, #120	; 0x78
 8001854:	f000 fa60 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001858:	2220      	movs	r2, #32
 800185a:	2100      	movs	r1, #0
 800185c:	2078      	movs	r0, #120	; 0x78
 800185e:	f000 fa5b 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001862:	2210      	movs	r2, #16
 8001864:	2100      	movs	r1, #0
 8001866:	2078      	movs	r0, #120	; 0x78
 8001868:	f000 fa56 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800186c:	22b0      	movs	r2, #176	; 0xb0
 800186e:	2100      	movs	r1, #0
 8001870:	2078      	movs	r0, #120	; 0x78
 8001872:	f000 fa51 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001876:	22c8      	movs	r2, #200	; 0xc8
 8001878:	2100      	movs	r1, #0
 800187a:	2078      	movs	r0, #120	; 0x78
 800187c:	f000 fa4c 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2078      	movs	r0, #120	; 0x78
 8001886:	f000 fa47 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800188a:	2210      	movs	r2, #16
 800188c:	2100      	movs	r1, #0
 800188e:	2078      	movs	r0, #120	; 0x78
 8001890:	f000 fa42 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001894:	2240      	movs	r2, #64	; 0x40
 8001896:	2100      	movs	r1, #0
 8001898:	2078      	movs	r0, #120	; 0x78
 800189a:	f000 fa3d 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800189e:	2281      	movs	r2, #129	; 0x81
 80018a0:	2100      	movs	r1, #0
 80018a2:	2078      	movs	r0, #120	; 0x78
 80018a4:	f000 fa38 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80018a8:	22ff      	movs	r2, #255	; 0xff
 80018aa:	2100      	movs	r1, #0
 80018ac:	2078      	movs	r0, #120	; 0x78
 80018ae:	f000 fa33 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80018b2:	22a1      	movs	r2, #161	; 0xa1
 80018b4:	2100      	movs	r1, #0
 80018b6:	2078      	movs	r0, #120	; 0x78
 80018b8:	f000 fa2e 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80018bc:	22a6      	movs	r2, #166	; 0xa6
 80018be:	2100      	movs	r1, #0
 80018c0:	2078      	movs	r0, #120	; 0x78
 80018c2:	f000 fa29 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80018c6:	22a8      	movs	r2, #168	; 0xa8
 80018c8:	2100      	movs	r1, #0
 80018ca:	2078      	movs	r0, #120	; 0x78
 80018cc:	f000 fa24 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80018d0:	223f      	movs	r2, #63	; 0x3f
 80018d2:	2100      	movs	r1, #0
 80018d4:	2078      	movs	r0, #120	; 0x78
 80018d6:	f000 fa1f 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018da:	22a4      	movs	r2, #164	; 0xa4
 80018dc:	2100      	movs	r1, #0
 80018de:	2078      	movs	r0, #120	; 0x78
 80018e0:	f000 fa1a 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80018e4:	22d3      	movs	r2, #211	; 0xd3
 80018e6:	2100      	movs	r1, #0
 80018e8:	2078      	movs	r0, #120	; 0x78
 80018ea:	f000 fa15 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	; 0x78
 80018f4:	f000 fa10 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80018f8:	22d5      	movs	r2, #213	; 0xd5
 80018fa:	2100      	movs	r1, #0
 80018fc:	2078      	movs	r0, #120	; 0x78
 80018fe:	f000 fa0b 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001902:	22f0      	movs	r2, #240	; 0xf0
 8001904:	2100      	movs	r1, #0
 8001906:	2078      	movs	r0, #120	; 0x78
 8001908:	f000 fa06 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800190c:	22d9      	movs	r2, #217	; 0xd9
 800190e:	2100      	movs	r1, #0
 8001910:	2078      	movs	r0, #120	; 0x78
 8001912:	f000 fa01 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001916:	2222      	movs	r2, #34	; 0x22
 8001918:	2100      	movs	r1, #0
 800191a:	2078      	movs	r0, #120	; 0x78
 800191c:	f000 f9fc 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001920:	22da      	movs	r2, #218	; 0xda
 8001922:	2100      	movs	r1, #0
 8001924:	2078      	movs	r0, #120	; 0x78
 8001926:	f000 f9f7 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800192a:	2212      	movs	r2, #18
 800192c:	2100      	movs	r1, #0
 800192e:	2078      	movs	r0, #120	; 0x78
 8001930:	f000 f9f2 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001934:	22db      	movs	r2, #219	; 0xdb
 8001936:	2100      	movs	r1, #0
 8001938:	2078      	movs	r0, #120	; 0x78
 800193a:	f000 f9ed 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800193e:	2220      	movs	r2, #32
 8001940:	2100      	movs	r1, #0
 8001942:	2078      	movs	r0, #120	; 0x78
 8001944:	f000 f9e8 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001948:	228d      	movs	r2, #141	; 0x8d
 800194a:	2100      	movs	r1, #0
 800194c:	2078      	movs	r0, #120	; 0x78
 800194e:	f000 f9e3 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001952:	2214      	movs	r2, #20
 8001954:	2100      	movs	r1, #0
 8001956:	2078      	movs	r0, #120	; 0x78
 8001958:	f000 f9de 	bl	8001d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800195c:	22af      	movs	r2, #175	; 0xaf
 800195e:	2100      	movs	r1, #0
 8001960:	2078      	movs	r0, #120	; 0x78
 8001962:	f000 f9d9 	bl	8001d18 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001966:	222e      	movs	r2, #46	; 0x2e
 8001968:	2100      	movs	r1, #0
 800196a:	2078      	movs	r0, #120	; 0x78
 800196c:	f000 f9d4 	bl	8001d18 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001970:	2000      	movs	r0, #0
 8001972:	f000 f843 	bl	80019fc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001976:	f000 f813 	bl	80019a0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <SSD1306_Init+0x184>)
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SSD1306_Init+0x184>)
 8001982:	2200      	movs	r2, #0
 8001984:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <SSD1306_Init+0x184>)
 8001988:	2201      	movs	r2, #1
 800198a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200004c8 	.word	0x200004c8
 800199c:	200004b4 	.word	0x200004b4

080019a0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	e01d      	b.n	80019e8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	3b50      	subs	r3, #80	; 0x50
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	2100      	movs	r1, #0
 80019b6:	2078      	movs	r0, #120	; 0x78
 80019b8:	f000 f9ae 	bl	8001d18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2078      	movs	r0, #120	; 0x78
 80019c2:	f000 f9a9 	bl	8001d18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80019c6:	2210      	movs	r2, #16
 80019c8:	2100      	movs	r1, #0
 80019ca:	2078      	movs	r0, #120	; 0x78
 80019cc:	f000 f9a4 	bl	8001d18 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	01db      	lsls	r3, r3, #7
 80019d4:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <SSD1306_UpdateScreen+0x58>)
 80019d6:	441a      	add	r2, r3
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	2140      	movs	r1, #64	; 0x40
 80019dc:	2078      	movs	r0, #120	; 0x78
 80019de:	f000 f953 	bl	8001c88 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	3301      	adds	r3, #1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	2b07      	cmp	r3, #7
 80019ec:	d9de      	bls.n	80019ac <SSD1306_UpdateScreen+0xc>
	}
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200000b4 	.word	0x200000b4

080019fc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <SSD1306_Fill+0x14>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e000      	b.n	8001a12 <SSD1306_Fill+0x16>
 8001a10:	23ff      	movs	r3, #255	; 0xff
 8001a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a16:	4619      	mov	r1, r3
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <SSD1306_Fill+0x2c>)
 8001a1a:	f003 fb62 	bl	80050e2 <memset>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200000b4 	.word	0x200000b4

08001a2c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
 8001a36:	460b      	mov	r3, r1
 8001a38:	80bb      	strh	r3, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	70fb      	strb	r3, [r7, #3]
	if (
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	2b7f      	cmp	r3, #127	; 0x7f
 8001a42:	d848      	bhi.n	8001ad6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a44:	88bb      	ldrh	r3, [r7, #4]
 8001a46:	2b3f      	cmp	r3, #63	; 0x3f
 8001a48:	d845      	bhi.n	8001ad6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <SSD1306_DrawPixel+0xb4>)
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d11a      	bne.n	8001a9c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a66:	88fa      	ldrh	r2, [r7, #6]
 8001a68:	88bb      	ldrh	r3, [r7, #4]
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	b298      	uxth	r0, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	01db      	lsls	r3, r3, #7
 8001a72:	4413      	add	r3, r2
 8001a74:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <SSD1306_DrawPixel+0xb8>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	b25a      	sxtb	r2, r3
 8001a7a:	88bb      	ldrh	r3, [r7, #4]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b259      	sxtb	r1, r3
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	4603      	mov	r3, r0
 8001a90:	01db      	lsls	r3, r3, #7
 8001a92:	4413      	add	r3, r2
 8001a94:	b2c9      	uxtb	r1, r1
 8001a96:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <SSD1306_DrawPixel+0xb8>)
 8001a98:	54d1      	strb	r1, [r2, r3]
 8001a9a:	e01d      	b.n	8001ad8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	b298      	uxth	r0, r3
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	01db      	lsls	r3, r3, #7
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <SSD1306_DrawPixel+0xb8>)
 8001aac:	5cd3      	ldrb	r3, [r2, r3]
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	88bb      	ldrh	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	b259      	sxtb	r1, r3
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	4603      	mov	r3, r0
 8001aca:	01db      	lsls	r3, r3, #7
 8001acc:	4413      	add	r3, r2
 8001ace:	b2c9      	uxtb	r1, r1
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <SSD1306_DrawPixel+0xb8>)
 8001ad2:	54d1      	strb	r1, [r2, r3]
 8001ad4:	e000      	b.n	8001ad8 <SSD1306_DrawPixel+0xac>
		return;
 8001ad6:	bf00      	nop
	}
}
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	200004b4 	.word	0x200004b4
 8001ae4:	200000b4 	.word	0x200000b4

08001ae8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	80fb      	strh	r3, [r7, #6]
 8001af4:	4613      	mov	r3, r2
 8001af6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001af8:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <SSD1306_GotoXY+0x28>)
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <SSD1306_GotoXY+0x28>)
 8001b00:	88bb      	ldrh	r3, [r7, #4]
 8001b02:	8053      	strh	r3, [r2, #2]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200004b4 	.word	0x200004b4

08001b14 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b24:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <SSD1306_Putc+0xfc>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
	if (
 8001b30:	2b7f      	cmp	r3, #127	; 0x7f
 8001b32:	dc07      	bgt.n	8001b44 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <SSD1306_Putc+0xfc>)
 8001b36:	885b      	ldrh	r3, [r3, #2]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	785b      	ldrb	r3, [r3, #1]
 8001b3e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b40:	2b3f      	cmp	r3, #63	; 0x3f
 8001b42:	dd01      	ble.n	8001b48 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e05e      	b.n	8001c06 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	e04b      	b.n	8001be6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	3b20      	subs	r3, #32
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	7849      	ldrb	r1, [r1, #1]
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	440b      	add	r3, r1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	e030      	b.n	8001bd4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d010      	beq.n	8001ba4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <SSD1306_Putc+0xfc>)
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b298      	uxth	r0, r3
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <SSD1306_Putc+0xfc>)
 8001b90:	885a      	ldrh	r2, [r3, #2]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	79ba      	ldrb	r2, [r7, #6]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff ff45 	bl	8001a2c <SSD1306_DrawPixel>
 8001ba2:	e014      	b.n	8001bce <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <SSD1306_Putc+0xfc>)
 8001ba6:	881a      	ldrh	r2, [r3, #0]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	b298      	uxth	r0, r3
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <SSD1306_Putc+0xfc>)
 8001bb2:	885a      	ldrh	r2, [r3, #2]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	b299      	uxth	r1, r3
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf0c      	ite	eq
 8001bc2:	2301      	moveq	r3, #1
 8001bc4:	2300      	movne	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f7ff ff2f 	bl	8001a2c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d3c8      	bcc.n	8001b72 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	785b      	ldrb	r3, [r3, #1]
 8001bea:	461a      	mov	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d3ad      	bcc.n	8001b4e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <SSD1306_Putc+0xfc>)
 8001bf4:	881a      	ldrh	r2, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <SSD1306_Putc+0xfc>)
 8001c02:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001c04:	79fb      	ldrb	r3, [r7, #7]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200004b4 	.word	0x200004b4

08001c14 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c22:	e012      	b.n	8001c4a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	79fa      	ldrb	r2, [r7, #7]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff71 	bl	8001b14 <SSD1306_Putc>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d002      	beq.n	8001c44 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	e008      	b.n	8001c56 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1e8      	bne.n	8001c24 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	781b      	ldrb	r3, [r3, #0]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <ssd1306_I2C_Init+0x24>)
 8001c68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c6a:	e002      	b.n	8001c72 <ssd1306_I2C_Init+0x12>
		p--;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	0003d090 	.word	0x0003d090

08001c88 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b0c7      	sub	sp, #284	; 0x11c
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	4604      	mov	r4, r0
 8001c90:	4608      	mov	r0, r1
 8001c92:	4639      	mov	r1, r7
 8001c94:	600a      	str	r2, [r1, #0]
 8001c96:	4619      	mov	r1, r3
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	1dbb      	adds	r3, r7, #6
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	460a      	mov	r2, r1
 8001ca8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	1dba      	adds	r2, r7, #6
 8001cb0:	7812      	ldrb	r2, [r2, #0]
 8001cb2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001cba:	e010      	b.n	8001cde <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001cbc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cc0:	463a      	mov	r2, r7
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	441a      	add	r2, r3
 8001cc6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cca:	3301      	adds	r3, #1
 8001ccc:	7811      	ldrb	r1, [r2, #0]
 8001cce:	f107 020c 	add.w	r2, r7, #12
 8001cd2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001cd4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001cde:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1d3a      	adds	r2, r7, #4
 8001ce6:	8812      	ldrh	r2, [r2, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8e7      	bhi.n	8001cbc <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b299      	uxth	r1, r3
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	b298      	uxth	r0, r3
 8001cfa:	f107 020c 	add.w	r2, r7, #12
 8001cfe:	230a      	movs	r3, #10
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	4603      	mov	r3, r0
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <ssd1306_I2C_WriteMulti+0x8c>)
 8001d06:	f000 fe61 	bl	80029cc <HAL_I2C_Master_Transmit>
}
 8001d0a:	bf00      	nop
 8001d0c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd90      	pop	{r4, r7, pc}
 8001d14:	200004c8 	.word	0x200004c8

08001d18 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	460b      	mov	r3, r1
 8001d24:	71bb      	strb	r3, [r7, #6]
 8001d26:	4613      	mov	r3, r2
 8001d28:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001d2a:	79bb      	ldrb	r3, [r7, #6]
 8001d2c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d2e:	797b      	ldrb	r3, [r7, #5]
 8001d30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	b299      	uxth	r1, r3
 8001d36:	f107 020c 	add.w	r2, r7, #12
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2302      	movs	r3, #2
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <ssd1306_I2C_Write+0x38>)
 8001d42:	f000 fe43 	bl	80029cc <HAL_I2C_Master_Transmit>
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200004c8 	.word	0x200004c8

08001d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_MspInit+0x5c>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_MspInit+0x5c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6193      	str	r3, [r2, #24]
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_MspInit+0x5c>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_MspInit+0x5c>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <HAL_MspInit+0x5c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	61d3      	str	r3, [r2, #28]
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <HAL_MspInit+0x5c>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_MspInit+0x60>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_MspInit+0x60>)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000

08001db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <HardFault_Handler+0x4>

08001dca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <MemManage_Handler+0x4>

08001dd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <BusFault_Handler+0x4>

08001dd6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <UsageFault_Handler+0x4>

08001ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e04:	f000 f99a 	bl	800213c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e10:	2004      	movs	r0, #4
 8001e12:	f000 fc81 	bl	8002718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
   ret = SX1278_LoRaRxPacket(&SX1278);
 8001e16:	480e      	ldr	r0, [pc, #56]	; (8001e50 <EXTI2_IRQHandler+0x44>)
 8001e18:	f7ff f859 	bl	8000ece <SX1278_LoRaRxPacket>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <EXTI2_IRQHandler+0x48>)
 8001e22:	601a      	str	r2, [r3, #0]
   SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <EXTI2_IRQHandler+0x48>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	490a      	ldr	r1, [pc, #40]	; (8001e58 <EXTI2_IRQHandler+0x4c>)
 8001e2e:	4808      	ldr	r0, [pc, #32]	; (8001e50 <EXTI2_IRQHandler+0x44>)
 8001e30:	f7ff f948 	bl	80010c4 <SX1278_read>
   if ( buffer[0]=='W'&&buffer[1]=='L'){
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <EXTI2_IRQHandler+0x4c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b57      	cmp	r3, #87	; 0x57
 8001e3a:	d106      	bne.n	8001e4a <EXTI2_IRQHandler+0x3e>
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <EXTI2_IRQHandler+0x4c>)
 8001e3e:	785b      	ldrb	r3, [r3, #1]
 8001e40:	2b4c      	cmp	r3, #76	; 0x4c
 8001e42:	d102      	bne.n	8001e4a <EXTI2_IRQHandler+0x3e>
   			  flag=1;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <EXTI2_IRQHandler+0x50>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
   			}//end if

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200005ac 	.word	0x200005ac
 8001e54:	200006b8 	.word	0x200006b8
 8001e58:	2000056c 	.word	0x2000056c
 8001e5c:	200000b0 	.word	0x200000b0

08001e60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <TIM1_CC_IRQHandler+0x10>)
 8001e66:	f002 fbb1 	bl	80045cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000738 	.word	0x20000738

08001e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e7c:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <_sbrk+0x5c>)
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <_sbrk+0x60>)
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <_sbrk+0x64>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <_sbrk+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d207      	bcs.n	8001eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea4:	f003 f8e8 	bl	8005078 <__errno>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	230c      	movs	r3, #12
 8001eac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	e009      	b.n	8001ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <_sbrk+0x64>)
 8001ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20005000 	.word	0x20005000
 8001ed4:	00000400 	.word	0x00000400
 8001ed8:	200004bc 	.word	0x200004bc
 8001edc:	20000788 	.word	0x20000788

08001ee0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0318 	add.w	r3, r7, #24
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f18:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <MX_TIM1_Init+0xe4>)
 8001f1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f1e:	2207      	movs	r2, #7
 8001f20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f42:	4822      	ldr	r0, [pc, #136]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f44:	f002 f994 	bl	8004270 <HAL_TIM_Base_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001f4e:	f7ff fbdd 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f56:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	481b      	ldr	r0, [pc, #108]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f60:	f002 fcd0 	bl	8004904 <HAL_TIM_ConfigClockSource>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001f6a:	f7ff fbcf 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f6e:	4817      	ldr	r0, [pc, #92]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f70:	f002 f9cd 	bl	800430e <HAL_TIM_IC_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001f7a:	f7ff fbc7 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480f      	ldr	r0, [pc, #60]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001f8e:	f003 f803 	bl	8004f98 <HAL_TIMEx_MasterConfigSynchronization>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001f98:	f7ff fbb8 	bl	800170c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fac:	463b      	mov	r3, r7
 8001fae:	2200      	movs	r2, #0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <MX_TIM1_Init+0xe0>)
 8001fb4:	f002 fc12 	bl	80047dc <HAL_TIM_IC_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001fbe:	f7ff fba5 	bl	800170c <Error_Handler>
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000738 	.word	0x20000738
 8001fd0:	40012c00 	.word	0x40012c00

08001fd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_TIM_Base_MspInit+0x84>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d12c      	bne.n	800204e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_TIM_Base_MspInit+0x88>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_TIM_Base_MspInit+0x88>)
 8001ffa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_TIM_Base_MspInit+0x88>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_TIM_Base_MspInit+0x88>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	4a12      	ldr	r2, [pc, #72]	; (800205c <HAL_TIM_Base_MspInit+0x88>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6193      	str	r3, [r2, #24]
 8002018:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_TIM_Base_MspInit+0x88>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8002024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002028:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4619      	mov	r1, r3
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <HAL_TIM_Base_MspInit+0x8c>)
 800203a:	f000 f9cb 	bl	80023d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2101      	movs	r1, #1
 8002042:	201b      	movs	r0, #27
 8002044:	f000 f98f 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002048:	201b      	movs	r0, #27
 800204a:	f000 f9a8 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800204e:	bf00      	nop
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40010800 	.word	0x40010800

08002064 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002064:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002066:	e003      	b.n	8002070 <LoopCopyDataInit>

08002068 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800206a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800206c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800206e:	3104      	adds	r1, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002070:	480a      	ldr	r0, [pc, #40]	; (800209c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002074:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002076:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002078:	d3f6      	bcc.n	8002068 <CopyDataInit>
  ldr r2, =_sbss
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800207c:	e002      	b.n	8002084 <LoopFillZerobss>

0800207e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002080:	f842 3b04 	str.w	r3, [r2], #4

08002084 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002086:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002088:	d3f9      	bcc.n	800207e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800208a:	f7ff ff29 	bl	8001ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208e:	f002 fff9 	bl	8005084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002092:	f7ff f91f 	bl	80012d4 <main>
  bx lr
 8002096:	4770      	bx	lr
  ldr r3, =_sidata
 8002098:	08007a64 	.word	0x08007a64
  ldr r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020a0:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 80020a4:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 80020a8:	20000788 	.word	0x20000788

080020ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC1_2_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_Init+0x28>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_Init+0x28>)
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 f945 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 f808 	bl	80020dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020cc:	f7ff fe42 	bl	8001d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022000 	.word	0x40022000

080020dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_InitTick+0x54>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x58>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f95d 	bl	80023ba <HAL_SYSTICK_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00e      	b.n	8002128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d80a      	bhi.n	8002126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002110:	2200      	movs	r2, #0
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f000 f925 	bl	8002366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <HAL_InitTick+0x5c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e000      	b.n	8002128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000010 	.word	0x20000010
 8002134:	20000018 	.word	0x20000018
 8002138:	20000014 	.word	0x20000014

0800213c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_IncTick+0x1c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_IncTick+0x20>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a03      	ldr	r2, [pc, #12]	; (800215c <HAL_IncTick+0x20>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	20000018 	.word	0x20000018
 800215c:	20000780 	.word	0x20000780

08002160 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <HAL_GetTick+0x10>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000780 	.word	0x20000780

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff fff0 	bl	8002160 <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d005      	beq.n	800219a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_Delay+0x40>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800219a:	bf00      	nop
 800219c:	f7ff ffe0 	bl	8002160 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d8f7      	bhi.n	800219c <HAL_Delay+0x28>
  {
  }
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000018 	.word	0x20000018

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4906      	ldr	r1, [pc, #24]	; (8002250 <__NVIC_EnableIRQ+0x34>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231c:	d301      	bcc.n	8002322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231e:	2301      	movs	r3, #1
 8002320:	e00f      	b.n	8002342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <SysTick_Config+0x40>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232a:	210f      	movs	r1, #15
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f7ff ff90 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <SysTick_Config+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233a:	4b04      	ldr	r3, [pc, #16]	; (800234c <SysTick_Config+0x40>)
 800233c:	2207      	movs	r2, #7
 800233e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	e000e010 	.word	0xe000e010

08002350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff2d 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff42 	bl	8002200 <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ff90 	bl	80022a8 <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff5f 	bl	8002254 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff35 	bl	800221c <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffa2 	bl	800230c <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b08b      	sub	sp, #44	; 0x2c
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e6:	e127      	b.n	8002638 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023e8:	2201      	movs	r2, #1
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	429a      	cmp	r2, r3
 8002402:	f040 8116 	bne.w	8002632 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b12      	cmp	r3, #18
 800240c:	d034      	beq.n	8002478 <HAL_GPIO_Init+0xa4>
 800240e:	2b12      	cmp	r3, #18
 8002410:	d80d      	bhi.n	800242e <HAL_GPIO_Init+0x5a>
 8002412:	2b02      	cmp	r3, #2
 8002414:	d02b      	beq.n	800246e <HAL_GPIO_Init+0x9a>
 8002416:	2b02      	cmp	r3, #2
 8002418:	d804      	bhi.n	8002424 <HAL_GPIO_Init+0x50>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d031      	beq.n	8002482 <HAL_GPIO_Init+0xae>
 800241e:	2b01      	cmp	r3, #1
 8002420:	d01c      	beq.n	800245c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002422:	e048      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002424:	2b03      	cmp	r3, #3
 8002426:	d043      	beq.n	80024b0 <HAL_GPIO_Init+0xdc>
 8002428:	2b11      	cmp	r3, #17
 800242a:	d01b      	beq.n	8002464 <HAL_GPIO_Init+0x90>
          break;
 800242c:	e043      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800242e:	4a89      	ldr	r2, [pc, #548]	; (8002654 <HAL_GPIO_Init+0x280>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d026      	beq.n	8002482 <HAL_GPIO_Init+0xae>
 8002434:	4a87      	ldr	r2, [pc, #540]	; (8002654 <HAL_GPIO_Init+0x280>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d806      	bhi.n	8002448 <HAL_GPIO_Init+0x74>
 800243a:	4a87      	ldr	r2, [pc, #540]	; (8002658 <HAL_GPIO_Init+0x284>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d020      	beq.n	8002482 <HAL_GPIO_Init+0xae>
 8002440:	4a86      	ldr	r2, [pc, #536]	; (800265c <HAL_GPIO_Init+0x288>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01d      	beq.n	8002482 <HAL_GPIO_Init+0xae>
          break;
 8002446:	e036      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002448:	4a85      	ldr	r2, [pc, #532]	; (8002660 <HAL_GPIO_Init+0x28c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0xae>
 800244e:	4a85      	ldr	r2, [pc, #532]	; (8002664 <HAL_GPIO_Init+0x290>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d016      	beq.n	8002482 <HAL_GPIO_Init+0xae>
 8002454:	4a84      	ldr	r2, [pc, #528]	; (8002668 <HAL_GPIO_Init+0x294>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_GPIO_Init+0xae>
          break;
 800245a:	e02c      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	623b      	str	r3, [r7, #32]
          break;
 8002462:	e028      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	3304      	adds	r3, #4
 800246a:	623b      	str	r3, [r7, #32]
          break;
 800246c:	e023      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	3308      	adds	r3, #8
 8002474:	623b      	str	r3, [r7, #32]
          break;
 8002476:	e01e      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	330c      	adds	r3, #12
 800247e:	623b      	str	r3, [r7, #32]
          break;
 8002480:	e019      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800248a:	2304      	movs	r3, #4
 800248c:	623b      	str	r3, [r7, #32]
          break;
 800248e:	e012      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002498:	2308      	movs	r3, #8
 800249a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	611a      	str	r2, [r3, #16]
          break;
 80024a2:	e008      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024a4:	2308      	movs	r3, #8
 80024a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	615a      	str	r2, [r3, #20]
          break;
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
          break;
 80024b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2bff      	cmp	r3, #255	; 0xff
 80024ba:	d801      	bhi.n	80024c0 <HAL_GPIO_Init+0xec>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	e001      	b.n	80024c4 <HAL_GPIO_Init+0xf0>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2bff      	cmp	r3, #255	; 0xff
 80024ca:	d802      	bhi.n	80024d2 <HAL_GPIO_Init+0xfe>
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	e002      	b.n	80024d8 <HAL_GPIO_Init+0x104>
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	3b08      	subs	r3, #8
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	210f      	movs	r1, #15
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	401a      	ands	r2, r3
 80024ea:	6a39      	ldr	r1, [r7, #32]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	431a      	orrs	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8096 	beq.w	8002632 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002506:	4b59      	ldr	r3, [pc, #356]	; (800266c <HAL_GPIO_Init+0x298>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_GPIO_Init+0x298>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6193      	str	r3, [r2, #24]
 8002512:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_GPIO_Init+0x298>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800251e:	4a54      	ldr	r2, [pc, #336]	; (8002670 <HAL_GPIO_Init+0x29c>)
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4b      	ldr	r2, [pc, #300]	; (8002674 <HAL_GPIO_Init+0x2a0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_Init+0x19e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4a      	ldr	r2, [pc, #296]	; (8002678 <HAL_GPIO_Init+0x2a4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00d      	beq.n	800256e <HAL_GPIO_Init+0x19a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a49      	ldr	r2, [pc, #292]	; (800267c <HAL_GPIO_Init+0x2a8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_Init+0x196>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a48      	ldr	r2, [pc, #288]	; (8002680 <HAL_GPIO_Init+0x2ac>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_GPIO_Init+0x192>
 8002562:	2303      	movs	r3, #3
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x1a0>
 8002566:	2304      	movs	r3, #4
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x1a0>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x1a0>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x1a0>
 8002572:	2300      	movs	r3, #0
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002584:	493a      	ldr	r1, [pc, #232]	; (8002670 <HAL_GPIO_Init+0x29c>)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800259e:	4b39      	ldr	r3, [pc, #228]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4938      	ldr	r1, [pc, #224]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
 80025aa:	e006      	b.n	80025ba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	4933      	ldr	r1, [pc, #204]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025c6:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	492e      	ldr	r1, [pc, #184]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
 80025d2:	e006      	b.n	80025e2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	43db      	mvns	r3, r3
 80025dc:	4929      	ldr	r1, [pc, #164]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025de:	4013      	ands	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025ee:	4b25      	ldr	r3, [pc, #148]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	4924      	ldr	r1, [pc, #144]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
 80025fa:	e006      	b.n	800260a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	43db      	mvns	r3, r3
 8002604:	491f      	ldr	r1, [pc, #124]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 8002606:	4013      	ands	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	491a      	ldr	r1, [pc, #104]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	60cb      	str	r3, [r1, #12]
 8002622:	e006      	b.n	8002632 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	43db      	mvns	r3, r3
 800262c:	4915      	ldr	r1, [pc, #84]	; (8002684 <HAL_GPIO_Init+0x2b0>)
 800262e:	4013      	ands	r3, r2
 8002630:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	3301      	adds	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	f47f aed0 	bne.w	80023e8 <HAL_GPIO_Init+0x14>
  }
}
 8002648:	bf00      	nop
 800264a:	372c      	adds	r7, #44	; 0x2c
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	10210000 	.word	0x10210000
 8002658:	10110000 	.word	0x10110000
 800265c:	10120000 	.word	0x10120000
 8002660:	10310000 	.word	0x10310000
 8002664:	10320000 	.word	0x10320000
 8002668:	10220000 	.word	0x10220000
 800266c:	40021000 	.word	0x40021000
 8002670:	40010000 	.word	0x40010000
 8002674:	40010800 	.word	0x40010800
 8002678:	40010c00 	.word	0x40010c00
 800267c:	40011000 	.word	0x40011000
 8002680:	40011400 	.word	0x40011400
 8002684:	40010400 	.word	0x40010400

08002688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e001      	b.n	80026aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	807b      	strh	r3, [r7, #2]
 80026c2:	4613      	mov	r3, r2
 80026c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c6:	787b      	ldrb	r3, [r7, #1]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026d2:	e003      	b.n	80026dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	041a      	lsls	r2, r3, #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	611a      	str	r2, [r3, #16]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f8:	887a      	ldrh	r2, [r7, #2]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	041a      	lsls	r2, r3, #16
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43d9      	mvns	r1, r3
 8002704:	887b      	ldrh	r3, [r7, #2]
 8002706:	400b      	ands	r3, r1
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	611a      	str	r2, [r3, #16]
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f806 	bl	8002748 <HAL_GPIO_EXTI_Callback>
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e11f      	b.n	80029ae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe fd68 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	; 0x24
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c0:	f001 f90e 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 80027c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a7b      	ldr	r2, [pc, #492]	; (80029b8 <HAL_I2C_Init+0x25c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d807      	bhi.n	80027e0 <HAL_I2C_Init+0x84>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a7a      	ldr	r2, [pc, #488]	; (80029bc <HAL_I2C_Init+0x260>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e006      	b.n	80027ee <HAL_I2C_Init+0x92>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a77      	ldr	r2, [pc, #476]	; (80029c0 <HAL_I2C_Init+0x264>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	bf94      	ite	ls
 80027e8:	2301      	movls	r3, #1
 80027ea:	2300      	movhi	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0db      	b.n	80029ae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a72      	ldr	r2, [pc, #456]	; (80029c4 <HAL_I2C_Init+0x268>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9b      	lsrs	r3, r3, #18
 8002800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a64      	ldr	r2, [pc, #400]	; (80029b8 <HAL_I2C_Init+0x25c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d802      	bhi.n	8002830 <HAL_I2C_Init+0xd4>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	e009      	b.n	8002844 <HAL_I2C_Init+0xe8>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a63      	ldr	r2, [pc, #396]	; (80029c8 <HAL_I2C_Init+0x26c>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	3301      	adds	r3, #1
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002856:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4956      	ldr	r1, [pc, #344]	; (80029b8 <HAL_I2C_Init+0x25c>)
 8002860:	428b      	cmp	r3, r1
 8002862:	d80d      	bhi.n	8002880 <HAL_I2C_Init+0x124>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e59      	subs	r1, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b04      	cmp	r3, #4
 800287a:	bf38      	it	cc
 800287c:	2304      	movcc	r3, #4
 800287e:	e04f      	b.n	8002920 <HAL_I2C_Init+0x1c4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <HAL_I2C_Init+0x150>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e012      	b.n	80028d2 <HAL_I2C_Init+0x176>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1e58      	subs	r0, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	0099      	lsls	r1, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Init+0x17e>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e022      	b.n	8002920 <HAL_I2C_Init+0x1c4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <HAL_I2C_Init+0x1a4>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e58      	subs	r0, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	440b      	add	r3, r1
 80028f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Init+0x1c4>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e58      	subs	r0, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	0099      	lsls	r1, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	fbb0 f3f3 	udiv	r3, r0, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	6809      	ldr	r1, [r1, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800294e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6911      	ldr	r1, [r2, #16]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68d2      	ldr	r2, [r2, #12]
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	430b      	orrs	r3, r1
 8002962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	000186a0 	.word	0x000186a0
 80029bc:	001e847f 	.word	0x001e847f
 80029c0:	003d08ff 	.word	0x003d08ff
 80029c4:	431bde83 	.word	0x431bde83
 80029c8:	10624dd3 	.word	0x10624dd3

080029cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
 80029dc:	4613      	mov	r3, r2
 80029de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff fbbe 	bl	8002160 <HAL_GetTick>
 80029e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	f040 80e0 	bne.w	8002bb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2319      	movs	r3, #25
 80029fa:	2201      	movs	r2, #1
 80029fc:	4970      	ldr	r1, [pc, #448]	; (8002bc0 <HAL_I2C_Master_Transmit+0x1f4>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fa92 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0d3      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2C_Master_Transmit+0x50>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0cc      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d007      	beq.n	8002a42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2221      	movs	r2, #33	; 0x21
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	893a      	ldrh	r2, [r7, #8]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f9ca 	bl	8002e24 <I2C_MasterRequestWrite>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e08d      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ab0:	e066      	b.n	8002b80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	6a39      	ldr	r1, [r7, #32]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fb0c 	bl	80030d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06b      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_I2C_Master_Transmit+0x188>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	6a39      	ldr	r1, [r7, #32]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fafc 	bl	8003156 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d107      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e01a      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d194      	bne.n	8002ab2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	00100002 	.word	0x00100002
 8002bc4:	ffff0000 	.word	0xffff0000

08002bc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7ff fac2 	bl	8002160 <HAL_GetTick>
 8002bdc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	f040 8111 	bne.w	8002e12 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2319      	movs	r3, #25
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4988      	ldr	r1, [pc, #544]	; (8002e1c <HAL_I2C_IsDeviceReady+0x254>)
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f994 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
 8002c08:	e104      	b.n	8002e14 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_I2C_IsDeviceReady+0x50>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e0fd      	b.n	8002e14 <HAL_I2C_IsDeviceReady+0x24c>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d007      	beq.n	8002c3e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2224      	movs	r2, #36	; 0x24
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a70      	ldr	r2, [pc, #448]	; (8002e20 <HAL_I2C_IsDeviceReady+0x258>)
 8002c60:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c70:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f952 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c98:	d103      	bne.n	8002ca2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0b6      	b.n	8002e14 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca6:	897b      	ldrh	r3, [r7, #10]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fa53 	bl	8002160 <HAL_GetTick>
 8002cba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cea:	e025      	b.n	8002d38 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7ff fa38 	bl	8002160 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d302      	bcc.n	8002d02 <HAL_I2C_IsDeviceReady+0x13a>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	22a0      	movs	r2, #160	; 0xa0
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2ba0      	cmp	r3, #160	; 0xa0
 8002d42:	d005      	beq.n	8002d50 <HAL_I2C_IsDeviceReady+0x188>
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <HAL_I2C_IsDeviceReady+0x188>
 8002d4a:	7dbb      	ldrb	r3, [r7, #22]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0cd      	beq.n	8002cec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d129      	bne.n	8002dba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d74:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2319      	movs	r3, #25
 8002d92:	2201      	movs	r2, #1
 8002d94:	4921      	ldr	r1, [pc, #132]	; (8002e1c <HAL_I2C_IsDeviceReady+0x254>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8c6 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e036      	b.n	8002e14 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e02c      	b.n	8002e14 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dd2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2319      	movs	r3, #25
 8002dda:	2201      	movs	r2, #1
 8002ddc:	490f      	ldr	r1, [pc, #60]	; (8002e1c <HAL_I2C_IsDeviceReady+0x254>)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f8a2 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e012      	b.n	8002e14 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	f4ff af32 	bcc.w	8002c62 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	00100002 	.word	0x00100002
 8002e20:	ffff0000 	.word	0xffff0000

08002e24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	460b      	mov	r3, r1
 8002e32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d006      	beq.n	8002e4e <I2C_MasterRequestWrite+0x2a>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d003      	beq.n	8002e4e <I2C_MasterRequestWrite+0x2a>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e4c:	d108      	bne.n	8002e60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e00b      	b.n	8002e78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	2b12      	cmp	r3, #18
 8002e66:	d107      	bne.n	8002e78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f84f 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9e:	d103      	bne.n	8002ea8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e035      	b.n	8002f18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb4:	d108      	bne.n	8002ec8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e01b      	b.n	8002f00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	11db      	asrs	r3, r3, #7
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 0306 	and.w	r3, r3, #6
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f063 030f 	orn	r3, r3, #15
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <I2C_MasterRequestWrite+0xfc>)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f875 	bl	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e010      	b.n	8002f18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <I2C_MasterRequestWrite+0x100>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f865 	bl	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	00010008 	.word	0x00010008
 8002f24:	00010002 	.word	0x00010002

08002f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f38:	e025      	b.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d021      	beq.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7ff f90d 	bl	8002160 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d116      	bne.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f043 0220 	orr.w	r2, r3, #32
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e023      	b.n	8002fce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10d      	bne.n	8002fac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	e00c      	b.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d0b6      	beq.n	8002f3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe4:	e051      	b.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d123      	bne.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003004:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800300e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0204 	orr.w	r2, r3, #4
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e046      	b.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d021      	beq.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7ff f88b 	bl	8002160 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d116      	bne.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e020      	b.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10c      	bne.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4013      	ands	r3, r2
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e00b      	b.n	80030c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	43da      	mvns	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d18d      	bne.n	8002fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e0:	e02d      	b.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f878 	bl	80031d8 <I2C_IsAcknowledgeFailed>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e02d      	b.n	800314e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d021      	beq.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7ff f831 	bl	8002160 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d116      	bne.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0220 	orr.w	r2, r3, #32
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e007      	b.n	800314e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d1ca      	bne.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003162:	e02d      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f837 	bl	80031d8 <I2C_IsAcknowledgeFailed>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e02d      	b.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d021      	beq.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317c:	f7fe fff0 	bl	8002160 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e007      	b.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d1ca      	bne.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d11b      	bne.n	8003228 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e26c      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8087 	beq.w	8003362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003254:	4b92      	ldr	r3, [pc, #584]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b04      	cmp	r3, #4
 800325e:	d00c      	beq.n	800327a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003260:	4b8f      	ldr	r3, [pc, #572]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d112      	bne.n	8003292 <HAL_RCC_OscConfig+0x5e>
 800326c:	4b8c      	ldr	r3, [pc, #560]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d10b      	bne.n	8003292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327a:	4b89      	ldr	r3, [pc, #548]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d06c      	beq.n	8003360 <HAL_RCC_OscConfig+0x12c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d168      	bne.n	8003360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e246      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x76>
 800329c:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a7f      	ldr	r2, [pc, #508]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e02e      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b2:	4b7b      	ldr	r3, [pc, #492]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7a      	ldr	r2, [pc, #488]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a77      	ldr	r2, [pc, #476]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0xbc>
 80032d6:	4b72      	ldr	r3, [pc, #456]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a71      	ldr	r2, [pc, #452]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6e      	ldr	r2, [pc, #440]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032f0:	4b6b      	ldr	r3, [pc, #428]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b68      	ldr	r3, [pc, #416]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a67      	ldr	r2, [pc, #412]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe ff26 	bl	8002160 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe ff22 	bl	8002160 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e1fa      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5d      	ldr	r3, [pc, #372]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xe4>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe ff12 	bl	8002160 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe ff0e 	bl	8002160 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1e6      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x10c>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336e:	4b4c      	ldr	r3, [pc, #304]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800337a:	4b49      	ldr	r3, [pc, #292]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x18c>
 8003386:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x176>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1ba      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4939      	ldr	r1, [pc, #228]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fec7 	bl	8002160 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe fec3 	bl	8002160 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e19b      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4927      	ldr	r1, [pc, #156]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <HAL_RCC_OscConfig+0x270>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fea6 	bl	8002160 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe fea2 	bl	8002160 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e17a      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d03a      	beq.n	80034b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d019      	beq.n	800347e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003450:	f7fe fe86 	bl	8002160 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe fe82 	bl	8002160 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e15a      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003476:	2001      	movs	r0, #1
 8003478:	f000 fac6 	bl	8003a08 <RCC_Delay>
 800347c:	e01c      	b.n	80034b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe fe6c 	bl	8002160 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348a:	e00f      	b.n	80034ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe fe68 	bl	8002160 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d908      	bls.n	80034ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e140      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	42420000 	.word	0x42420000
 80034a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	4b9e      	ldr	r3, [pc, #632]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e9      	bne.n	800348c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80a6 	beq.w	8003612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b97      	ldr	r3, [pc, #604]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	4b94      	ldr	r3, [pc, #592]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4a93      	ldr	r2, [pc, #588]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	61d3      	str	r3, [r2, #28]
 80034e2:	4b91      	ldr	r3, [pc, #580]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b8e      	ldr	r3, [pc, #568]	; (800372c <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b8b      	ldr	r3, [pc, #556]	; (800372c <HAL_RCC_OscConfig+0x4f8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a8a      	ldr	r2, [pc, #552]	; (800372c <HAL_RCC_OscConfig+0x4f8>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fe fe29 	bl	8002160 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fe fe25 	bl	8002160 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b64      	cmp	r3, #100	; 0x64
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0fd      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_RCC_OscConfig+0x4f8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x312>
 8003538:	4b7b      	ldr	r3, [pc, #492]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a7a      	ldr	r2, [pc, #488]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	e02d      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x334>
 800354e:	4b76      	ldr	r3, [pc, #472]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a75      	ldr	r2, [pc, #468]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	4b73      	ldr	r3, [pc, #460]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a72      	ldr	r2, [pc, #456]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	e01c      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d10c      	bne.n	800358a <HAL_RCC_OscConfig+0x356>
 8003570:	4b6d      	ldr	r3, [pc, #436]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a6c      	ldr	r2, [pc, #432]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4a69      	ldr	r2, [pc, #420]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6213      	str	r3, [r2, #32]
 8003588:	e00b      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 800358a:	4b67      	ldr	r3, [pc, #412]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a66      	ldr	r2, [pc, #408]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	4b64      	ldr	r3, [pc, #400]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a63      	ldr	r2, [pc, #396]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d015      	beq.n	80035d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fdd9 	bl	8002160 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe fdd5 	bl	8002160 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0ab      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	4b57      	ldr	r3, [pc, #348]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ee      	beq.n	80035b2 <HAL_RCC_OscConfig+0x37e>
 80035d4:	e014      	b.n	8003600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fe fdc3 	bl	8002160 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fe fdbf 	bl	8002160 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e095      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f4:	4b4c      	ldr	r3, [pc, #304]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ee      	bne.n	80035de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4b48      	ldr	r3, [pc, #288]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4a47      	ldr	r2, [pc, #284]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800360c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8081 	beq.w	800371e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361c:	4b42      	ldr	r3, [pc, #264]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d061      	beq.n	80036ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d146      	bne.n	80036be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b3f      	ldr	r3, [pc, #252]	; (8003730 <HAL_RCC_OscConfig+0x4fc>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003636:	f7fe fd93 	bl	8002160 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363e:	f7fe fd8f 	bl	8002160 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e067      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003650:	4b35      	ldr	r3, [pc, #212]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f0      	bne.n	800363e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d108      	bne.n	8003678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003666:	4b30      	ldr	r3, [pc, #192]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	492d      	ldr	r1, [pc, #180]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003678:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a19      	ldr	r1, [r3, #32]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	430b      	orrs	r3, r1
 800368a:	4927      	ldr	r1, [pc, #156]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x4fc>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe fd63 	bl	8002160 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fe fd5f 	bl	8002160 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e037      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x46a>
 80036bc:	e02f      	b.n	800371e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <HAL_RCC_OscConfig+0x4fc>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fd4c 	bl	8002160 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe fd48 	bl	8002160 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e020      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x498>
 80036ea:	e018      	b.n	800371e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e013      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	429a      	cmp	r2, r3
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
 8003730:	42420060 	.word	0x42420060

08003734 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0d0      	b.n	80038ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d910      	bls.n	8003778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b67      	ldr	r3, [pc, #412]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 0207 	bic.w	r2, r3, #7
 800375e:	4965      	ldr	r1, [pc, #404]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b63      	ldr	r3, [pc, #396]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0b8      	b.n	80038ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003790:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a58      	ldr	r2, [pc, #352]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800379a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a8:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4a52      	ldr	r2, [pc, #328]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b50      	ldr	r3, [pc, #320]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	494d      	ldr	r1, [pc, #308]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d040      	beq.n	8003854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d115      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e07f      	b.n	80038ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e073      	b.n	80038ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e06b      	b.n	80038ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4936      	ldr	r1, [pc, #216]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003824:	f7fe fc9c 	bl	8002160 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fe fc98 	bl	8002160 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e053      	b.n	80038ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b2d      	ldr	r3, [pc, #180]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d210      	bcs.n	8003884 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 0207 	bic.w	r2, r3, #7
 800386a:	4922      	ldr	r1, [pc, #136]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e032      	b.n	80038ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003890:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4916      	ldr	r1, [pc, #88]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	490e      	ldr	r1, [pc, #56]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c2:	f000 f821 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 80038c6:	4601      	mov	r1, r0
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
 80038d6:	fa21 f303 	lsr.w	r3, r1, r3
 80038da:	4a09      	ldr	r2, [pc, #36]	; (8003900 <HAL_RCC_ClockConfig+0x1cc>)
 80038dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1d0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fbfa 	bl	80020dc <HAL_InitTick>

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40022000 	.word	0x40022000
 80038f8:	40021000 	.word	0x40021000
 80038fc:	08007a10 	.word	0x08007a10
 8003900:	20000010 	.word	0x20000010
 8003904:	20000014 	.word	0x20000014

08003908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003908:	b490      	push	{r4, r7}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003910:	1d3c      	adds	r4, r7, #4
 8003912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003918:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003932:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b04      	cmp	r3, #4
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x40>
 8003942:	2b08      	cmp	r3, #8
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x46>
 8003946:	e02d      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003948:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800394a:	623b      	str	r3, [r7, #32]
      break;
 800394c:	e02d      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	0c9b      	lsrs	r3, r3, #18
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800395a:	4413      	add	r3, r2
 800395c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003960:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	0c5b      	lsrs	r3, r3, #17
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800397a:	4413      	add	r3, r2
 800397c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003980:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a0f      	ldr	r2, [pc, #60]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003986:	fb02 f203 	mul.w	r2, r2, r3
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	e004      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	623b      	str	r3, [r7, #32]
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039a6:	623b      	str	r3, [r7, #32]
      break;
 80039a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039aa:	6a3b      	ldr	r3, [r7, #32]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3728      	adds	r7, #40	; 0x28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc90      	pop	{r4, r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	08005934 	.word	0x08005934
 80039bc:	08005944 	.word	0x08005944
 80039c0:	40021000 	.word	0x40021000
 80039c4:	007a1200 	.word	0x007a1200
 80039c8:	003d0900 	.word	0x003d0900

080039cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b02      	ldr	r3, [pc, #8]	; (80039dc <HAL_RCC_GetHCLKFreq+0x10>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	20000010 	.word	0x20000010

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039e4:	f7ff fff2 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039e8:	4601      	mov	r1, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4a03      	ldr	r2, [pc, #12]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08007a20 	.word	0x08007a20

08003a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <RCC_Delay+0x34>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <RCC_Delay+0x38>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	0a5b      	lsrs	r3, r3, #9
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a24:	bf00      	nop
  }
  while (Delay --);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1e5a      	subs	r2, r3, #1
 8003a2a:	60fa      	str	r2, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f9      	bne.n	8003a24 <RCC_Delay+0x1c>
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000010 	.word	0x20000010
 8003a40:	10624dd3 	.word	0x10624dd3

08003a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e076      	b.n	8003b44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a66:	d009      	beq.n	8003a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	61da      	str	r2, [r3, #28]
 8003a6e:	e005      	b.n	8003a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fe74 	bl	8001784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	ea42 0103 	orr.w	r1, r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	0c1a      	lsrs	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f002 0204 	and.w	r2, r2, #4
 8003b22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_SPI_Transmit+0x22>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e126      	b.n	8003dbc <HAL_SPI_Transmit+0x270>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b76:	f7fe faf3 	bl	8002160 <HAL_GetTick>
 8003b7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d002      	beq.n	8003b92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b90:	e10b      	b.n	8003daa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_Transmit+0x52>
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ba2:	e102      	b.n	8003daa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	88fa      	ldrh	r2, [r7, #6]
 8003bbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	88fa      	ldrh	r2, [r7, #6]
 8003bc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bea:	d10f      	bne.n	8003c0c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d007      	beq.n	8003c2a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c32:	d14b      	bne.n	8003ccc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_SPI_Transmit+0xf6>
 8003c3c:	8afb      	ldrh	r3, [r7, #22]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d13e      	bne.n	8003cc0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	1c9a      	adds	r2, r3, #2
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c66:	e02b      	b.n	8003cc0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d112      	bne.n	8003c9c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	881a      	ldrh	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	1c9a      	adds	r2, r3, #2
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c9a:	e011      	b.n	8003cc0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c9c:	f7fe fa60 	bl	8002160 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d803      	bhi.n	8003cb4 <HAL_SPI_Transmit+0x168>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d102      	bne.n	8003cba <HAL_SPI_Transmit+0x16e>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cbe:	e074      	b.n	8003daa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ce      	bne.n	8003c68 <HAL_SPI_Transmit+0x11c>
 8003cca:	e04c      	b.n	8003d66 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_SPI_Transmit+0x18e>
 8003cd4:	8afb      	ldrh	r3, [r7, #22]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d140      	bne.n	8003d5c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d00:	e02c      	b.n	8003d5c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d113      	bne.n	8003d38 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d36:	e011      	b.n	8003d5c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d38:	f7fe fa12 	bl	8002160 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d803      	bhi.n	8003d50 <HAL_SPI_Transmit+0x204>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d102      	bne.n	8003d56 <HAL_SPI_Transmit+0x20a>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d5a:	e026      	b.n	8003daa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1cd      	bne.n	8003d02 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fa62 	bl	8004234 <SPI_EndRxTxTransaction>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e000      	b.n	8003daa <HAL_SPI_Transmit+0x25e>
  }

error:
 8003da8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08c      	sub	sp, #48	; 0x30
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_SPI_TransmitReceive+0x26>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e18a      	b.n	8004100 <HAL_SPI_TransmitReceive+0x33c>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df2:	f7fe f9b5 	bl	8002160 <HAL_GetTick>
 8003df6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e08:	887b      	ldrh	r3, [r7, #2]
 8003e0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d00f      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x70>
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1a:	d107      	bne.n	8003e2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <HAL_SPI_TransmitReceive+0x68>
 8003e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d003      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e32:	e15b      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x82>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x82>
 8003e40:	887b      	ldrh	r3, [r7, #2]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e4c:	e14e      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d003      	beq.n	8003e62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	887a      	ldrh	r2, [r7, #2]
 8003e72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	887a      	ldrh	r2, [r7, #2]
 8003e78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d007      	beq.n	8003eb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ebe:	d178      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x10a>
 8003ec8:	8b7b      	ldrh	r3, [r7, #26]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d166      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	881a      	ldrh	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	1c9a      	adds	r2, r3, #2
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ef2:	e053      	b.n	8003f9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d11b      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x176>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d016      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x176>
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d113      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	881a      	ldrh	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d119      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x1b8>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d014      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f7c:	f7fe f8f0 	bl	8002160 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d807      	bhi.n	8003f9c <HAL_SPI_TransmitReceive+0x1d8>
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d003      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f9a:	e0a7      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1a6      	bne.n	8003ef4 <HAL_SPI_TransmitReceive+0x130>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1a1      	bne.n	8003ef4 <HAL_SPI_TransmitReceive+0x130>
 8003fb0:	e07c      	b.n	80040ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x1fc>
 8003fba:	8b7b      	ldrh	r3, [r7, #26]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d16b      	bne.n	8004098 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe6:	e057      	b.n	8004098 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d11c      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x26c>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d017      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x26c>
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d114      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d119      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x2ae>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d014      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800406e:	2301      	movs	r3, #1
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004072:	f7fe f875 	bl	8002160 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800407e:	429a      	cmp	r2, r3
 8004080:	d803      	bhi.n	800408a <HAL_SPI_TransmitReceive+0x2c6>
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d102      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x2cc>
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d103      	bne.n	8004098 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004096:	e029      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1a2      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x224>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d19d      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f8bf 	bl	8004234 <SPI_EndRxTxTransaction>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040c8:	e010      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	e000      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004100:	4618      	mov	r0, r3
 8004102:	3730      	adds	r7, #48	; 0x30
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004116:	b2db      	uxtb	r3, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
	...

08004124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004134:	f7fe f814 	bl	8002160 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	4413      	add	r3, r2
 8004142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004144:	f7fe f80c 	bl	8002160 <HAL_GetTick>
 8004148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800414a:	4b39      	ldr	r3, [pc, #228]	; (8004230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	015b      	lsls	r3, r3, #5
 8004150:	0d1b      	lsrs	r3, r3, #20
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800415a:	e054      	b.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d050      	beq.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004164:	f7fd fffc 	bl	8002160 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	429a      	cmp	r2, r3
 8004172:	d902      	bls.n	800417a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d13d      	bne.n	80041f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004192:	d111      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d004      	beq.n	80041a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a6:	d107      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c0:	d10f      	bne.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e017      	b.n	8004226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3b01      	subs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	429a      	cmp	r2, r3
 8004222:	d19b      	bne.n	800415c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000010 	.word	0x20000010

08004234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff ff6a 	bl	8004124 <SPI_WaitFlagStateUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e000      	b.n	8004268 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e041      	b.n	8004306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd fe9c 	bl	8001fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f000 fc48 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e041      	b.n	80043a4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f839 	bl	80043ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f000 fbf9 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d104      	bne.n	80043da <HAL_TIM_IC_Start_IT+0x1a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	e013      	b.n	8004402 <HAL_TIM_IC_Start_IT+0x42>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d104      	bne.n	80043ea <HAL_TIM_IC_Start_IT+0x2a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	e00b      	b.n	8004402 <HAL_TIM_IC_Start_IT+0x42>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d104      	bne.n	80043fa <HAL_TIM_IC_Start_IT+0x3a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	e003      	b.n	8004402 <HAL_TIM_IC_Start_IT+0x42>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004400:	b2db      	uxtb	r3, r3
 8004402:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <HAL_TIM_IC_Start_IT+0x54>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e013      	b.n	800443c <HAL_TIM_IC_Start_IT+0x7c>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b04      	cmp	r3, #4
 8004418:	d104      	bne.n	8004424 <HAL_TIM_IC_Start_IT+0x64>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e00b      	b.n	800443c <HAL_TIM_IC_Start_IT+0x7c>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b08      	cmp	r3, #8
 8004428:	d104      	bne.n	8004434 <HAL_TIM_IC_Start_IT+0x74>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e003      	b.n	800443c <HAL_TIM_IC_Start_IT+0x7c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800443a:	b2db      	uxtb	r3, r3
 800443c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004444:	7bbb      	ldrb	r3, [r7, #14]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d001      	beq.n	800444e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e0b3      	b.n	80045b6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_TIM_IC_Start_IT+0x9e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	e013      	b.n	8004486 <HAL_TIM_IC_Start_IT+0xc6>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b04      	cmp	r3, #4
 8004462:	d104      	bne.n	800446e <HAL_TIM_IC_Start_IT+0xae>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800446c:	e00b      	b.n	8004486 <HAL_TIM_IC_Start_IT+0xc6>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d104      	bne.n	800447e <HAL_TIM_IC_Start_IT+0xbe>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800447c:	e003      	b.n	8004486 <HAL_TIM_IC_Start_IT+0xc6>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <HAL_TIM_IC_Start_IT+0xd6>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004494:	e013      	b.n	80044be <HAL_TIM_IC_Start_IT+0xfe>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_IC_Start_IT+0xe6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a4:	e00b      	b.n	80044be <HAL_TIM_IC_Start_IT+0xfe>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_IC_Start_IT+0xf6>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b4:	e003      	b.n	80044be <HAL_TIM_IC_Start_IT+0xfe>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b0c      	cmp	r3, #12
 80044c2:	d841      	bhi.n	8004548 <HAL_TIM_IC_Start_IT+0x188>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <HAL_TIM_IC_Start_IT+0x10c>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	08004501 	.word	0x08004501
 80044d0:	08004549 	.word	0x08004549
 80044d4:	08004549 	.word	0x08004549
 80044d8:	08004549 	.word	0x08004549
 80044dc:	08004513 	.word	0x08004513
 80044e0:	08004549 	.word	0x08004549
 80044e4:	08004549 	.word	0x08004549
 80044e8:	08004549 	.word	0x08004549
 80044ec:	08004525 	.word	0x08004525
 80044f0:	08004549 	.word	0x08004549
 80044f4:	08004549 	.word	0x08004549
 80044f8:	08004549 	.word	0x08004549
 80044fc:	08004537 	.word	0x08004537
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0202 	orr.w	r2, r2, #2
 800450e:	60da      	str	r2, [r3, #12]
      break;
 8004510:	e01b      	b.n	800454a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0204 	orr.w	r2, r2, #4
 8004520:	60da      	str	r2, [r3, #12]
      break;
 8004522:	e012      	b.n	800454a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0208 	orr.w	r2, r2, #8
 8004532:	60da      	str	r2, [r3, #12]
      break;
 8004534:	e009      	b.n	800454a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0210 	orr.w	r2, r2, #16
 8004544:	60da      	str	r2, [r3, #12]
      break;
 8004546:	e000      	b.n	800454a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004548:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2201      	movs	r2, #1
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fcfb 	bl	8004f4e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <HAL_TIM_IC_Start_IT+0x200>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00e      	beq.n	8004580 <HAL_TIM_IC_Start_IT+0x1c0>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456a:	d009      	beq.n	8004580 <HAL_TIM_IC_Start_IT+0x1c0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a14      	ldr	r2, [pc, #80]	; (80045c4 <HAL_TIM_IC_Start_IT+0x204>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_TIM_IC_Start_IT+0x1c0>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <HAL_TIM_IC_Start_IT+0x208>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d111      	bne.n	80045a4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b06      	cmp	r3, #6
 8004590:	d010      	beq.n	80045b4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a2:	e007      	b.n	80045b4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800

080045cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0202 	mvn.w	r2, #2
 80045f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc ffd2 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa79 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fa7f 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b04      	cmp	r3, #4
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b04      	cmp	r3, #4
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0204 	mvn.w	r2, #4
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fc ffa8 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa4f 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fa55 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b08      	cmp	r3, #8
 8004688:	d122      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b08      	cmp	r3, #8
 8004696:	d11b      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0208 	mvn.w	r2, #8
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2204      	movs	r2, #4
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc ff7e 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa25 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fa2b 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d122      	bne.n	8004724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d11b      	bne.n	8004724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0210 	mvn.w	r2, #16
 80046f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2208      	movs	r2, #8
 80046fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc ff54 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 8004710:	e005      	b.n	800471e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f9fb 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fa01 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10e      	bne.n	8004750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b01      	cmp	r3, #1
 800473e:	d107      	bne.n	8004750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0201 	mvn.w	r2, #1
 8004748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9d6 	bl	8004afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b80      	cmp	r3, #128	; 0x80
 800475c:	d10e      	bne.n	800477c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b80      	cmp	r3, #128	; 0x80
 800476a:	d107      	bne.n	800477c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fc75 	bl	8005066 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d10e      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d107      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f9c5 	bl	8004b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d10e      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d107      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0220 	mvn.w	r2, #32
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fc40 	bl	8005054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d4:	bf00      	nop
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e082      	b.n	80048fc <HAL_TIM_IC_ConfigChannel+0x120>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11b      	bne.n	800483c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f000 f9f8 	bl	8004c08 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 020c 	bic.w	r2, r2, #12
 8004826:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6999      	ldr	r1, [r3, #24]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	619a      	str	r2, [r3, #24]
 800483a:	e05a      	b.n	80048f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b04      	cmp	r3, #4
 8004840:	d11c      	bne.n	800487c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f000 fa61 	bl	8004d18 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004864:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6999      	ldr	r1, [r3, #24]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	021a      	lsls	r2, r3, #8
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	619a      	str	r2, [r3, #24]
 800487a:	e03a      	b.n	80048f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b08      	cmp	r3, #8
 8004880:	d11b      	bne.n	80048ba <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6819      	ldr	r1, [r3, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f000 faac 	bl	8004dee <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 020c 	bic.w	r2, r2, #12
 80048a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69d9      	ldr	r1, [r3, #28]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	61da      	str	r2, [r3, #28]
 80048b8:	e01b      	b.n	80048f2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f000 facb 	bl	8004e64 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	021a      	lsls	r2, r3, #8
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIM_ConfigClockSource+0x18>
 8004918:	2302      	movs	r3, #2
 800491a:	e0a6      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x166>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800493a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004942:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d067      	beq.n	8004a24 <HAL_TIM_ConfigClockSource+0x120>
 8004954:	2b40      	cmp	r3, #64	; 0x40
 8004956:	d80b      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x6c>
 8004958:	2b10      	cmp	r3, #16
 800495a:	d073      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x140>
 800495c:	2b10      	cmp	r3, #16
 800495e:	d802      	bhi.n	8004966 <HAL_TIM_ConfigClockSource+0x62>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d06f      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004964:	e078      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004966:	2b20      	cmp	r3, #32
 8004968:	d06c      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x140>
 800496a:	2b30      	cmp	r3, #48	; 0x30
 800496c:	d06a      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800496e:	e073      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004970:	2b70      	cmp	r3, #112	; 0x70
 8004972:	d00d      	beq.n	8004990 <HAL_TIM_ConfigClockSource+0x8c>
 8004974:	2b70      	cmp	r3, #112	; 0x70
 8004976:	d804      	bhi.n	8004982 <HAL_TIM_ConfigClockSource+0x7e>
 8004978:	2b50      	cmp	r3, #80	; 0x50
 800497a:	d033      	beq.n	80049e4 <HAL_TIM_ConfigClockSource+0xe0>
 800497c:	2b60      	cmp	r3, #96	; 0x60
 800497e:	d041      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004980:	e06a      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004986:	d066      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x152>
 8004988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498c:	d017      	beq.n	80049be <HAL_TIM_ConfigClockSource+0xba>
      break;
 800498e:	e063      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6899      	ldr	r1, [r3, #8]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f000 fab6 	bl	8004f10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	609a      	str	r2, [r3, #8]
      break;
 80049bc:	e04c      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6899      	ldr	r1, [r3, #8]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f000 fa9f 	bl	8004f10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e0:	609a      	str	r2, [r3, #8]
      break;
 80049e2:	e039      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	6859      	ldr	r1, [r3, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	461a      	mov	r2, r3
 80049f2:	f000 f963 	bl	8004cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2150      	movs	r1, #80	; 0x50
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fa6d 	bl	8004edc <TIM_ITRx_SetConfig>
      break;
 8004a02:	e029      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	461a      	mov	r2, r3
 8004a12:	f000 f9bd 	bl	8004d90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2160      	movs	r1, #96	; 0x60
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fa5d 	bl	8004edc <TIM_ITRx_SetConfig>
      break;
 8004a22:	e019      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f000 f943 	bl	8004cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2140      	movs	r1, #64	; 0x40
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fa4d 	bl	8004edc <TIM_ITRx_SetConfig>
      break;
 8004a42:	e009      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f000 fa44 	bl	8004edc <TIM_ITRx_SetConfig>
        break;
 8004a54:	e000      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	d831      	bhi.n	8004aec <HAL_TIM_ReadCapturedValue+0x78>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004ac5 	.word	0x08004ac5
 8004a94:	08004aed 	.word	0x08004aed
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004aed 	.word	0x08004aed
 8004aa0:	08004acf 	.word	0x08004acf
 8004aa4:	08004aed 	.word	0x08004aed
 8004aa8:	08004aed 	.word	0x08004aed
 8004aac:	08004aed 	.word	0x08004aed
 8004ab0:	08004ad9 	.word	0x08004ad9
 8004ab4:	08004aed 	.word	0x08004aed
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004aed 	.word	0x08004aed
 8004ac0:	08004ae3 	.word	0x08004ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aca:	60fb      	str	r3, [r7, #12]

      break;
 8004acc:	e00f      	b.n	8004aee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	60fb      	str	r3, [r7, #12]

      break;
 8004ad6:	e00a      	b.n	8004aee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	60fb      	str	r3, [r7, #12]

      break;
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	60fb      	str	r3, [r7, #12]

      break;
 8004aea:	e000      	b.n	8004aee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004aec:	bf00      	nop
  }

  return tmpreg;
 8004aee:	68fb      	ldr	r3, [r7, #12]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop

08004afc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a29      	ldr	r2, [pc, #164]	; (8004bfc <TIM_Base_SetConfig+0xb8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <TIM_Base_SetConfig+0x30>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0x30>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a26      	ldr	r2, [pc, #152]	; (8004c00 <TIM_Base_SetConfig+0xbc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0x30>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <TIM_Base_SetConfig+0xc0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <TIM_Base_SetConfig+0xb8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00b      	beq.n	8004ba6 <TIM_Base_SetConfig+0x62>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b94:	d007      	beq.n	8004ba6 <TIM_Base_SetConfig+0x62>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <TIM_Base_SetConfig+0xbc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_Base_SetConfig+0x62>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <TIM_Base_SetConfig+0xc0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d108      	bne.n	8004bb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a07      	ldr	r2, [pc, #28]	; (8004bfc <TIM_Base_SetConfig+0xb8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d103      	bne.n	8004bec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	615a      	str	r2, [r3, #20]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800

08004c08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f023 0201 	bic.w	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <TIM_TI1_SetConfig+0xa8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00b      	beq.n	8004c4e <TIM_TI1_SetConfig+0x46>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3c:	d007      	beq.n	8004c4e <TIM_TI1_SetConfig+0x46>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <TIM_TI1_SetConfig+0xac>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_TI1_SetConfig+0x46>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <TIM_TI1_SetConfig+0xb0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <TIM_TI1_SetConfig+0x4a>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <TIM_TI1_SetConfig+0x4c>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e003      	b.n	8004c72 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f023 030a 	bic.w	r3, r3, #10
 8004c8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 030a 	and.w	r3, r3, #10
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800

08004cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0201 	bic.w	r2, r3, #1
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 030a 	bic.w	r3, r3, #10
 8004cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr

08004d18 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f023 0210 	bic.w	r2, r3, #16
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	031b      	lsls	r3, r3, #12
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f023 0210 	bic.w	r2, r3, #16
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	031b      	lsls	r3, r3, #12
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b087      	sub	sp, #28
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0303 	bic.w	r3, r3, #3
 8004e1a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ea2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	031b      	lsls	r3, r3, #12
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	031b      	lsls	r3, r3, #12
 8004ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f043 0307 	orr.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	609a      	str	r2, [r3, #8]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	021a      	lsls	r2, r3, #8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	609a      	str	r2, [r3, #8]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	2201      	movs	r2, #1
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1a      	ldr	r2, [r3, #32]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	401a      	ands	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1a      	ldr	r2, [r3, #32]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	431a      	orrs	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr
	...

08004f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e046      	b.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d009      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a10      	ldr	r2, [pc, #64]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10c      	bne.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4313      	orrs	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40000400 	.word	0x40000400
 8005050:	40000800 	.word	0x40000800

08005054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr

08005066 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <__errno>:
 8005078:	4b01      	ldr	r3, [pc, #4]	; (8005080 <__errno+0x8>)
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	2000001c 	.word	0x2000001c

08005084 <__libc_init_array>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	2500      	movs	r5, #0
 8005088:	4e0c      	ldr	r6, [pc, #48]	; (80050bc <__libc_init_array+0x38>)
 800508a:	4c0d      	ldr	r4, [pc, #52]	; (80050c0 <__libc_init_array+0x3c>)
 800508c:	1ba4      	subs	r4, r4, r6
 800508e:	10a4      	asrs	r4, r4, #2
 8005090:	42a5      	cmp	r5, r4
 8005092:	d109      	bne.n	80050a8 <__libc_init_array+0x24>
 8005094:	f000 fc36 	bl	8005904 <_init>
 8005098:	2500      	movs	r5, #0
 800509a:	4e0a      	ldr	r6, [pc, #40]	; (80050c4 <__libc_init_array+0x40>)
 800509c:	4c0a      	ldr	r4, [pc, #40]	; (80050c8 <__libc_init_array+0x44>)
 800509e:	1ba4      	subs	r4, r4, r6
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	42a5      	cmp	r5, r4
 80050a4:	d105      	bne.n	80050b2 <__libc_init_array+0x2e>
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
 80050a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050ac:	4798      	blx	r3
 80050ae:	3501      	adds	r5, #1
 80050b0:	e7ee      	b.n	8005090 <__libc_init_array+0xc>
 80050b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050b6:	4798      	blx	r3
 80050b8:	3501      	adds	r5, #1
 80050ba:	e7f2      	b.n	80050a2 <__libc_init_array+0x1e>
 80050bc:	08007a5c 	.word	0x08007a5c
 80050c0:	08007a5c 	.word	0x08007a5c
 80050c4:	08007a5c 	.word	0x08007a5c
 80050c8:	08007a60 	.word	0x08007a60

080050cc <memcpy>:
 80050cc:	b510      	push	{r4, lr}
 80050ce:	1e43      	subs	r3, r0, #1
 80050d0:	440a      	add	r2, r1
 80050d2:	4291      	cmp	r1, r2
 80050d4:	d100      	bne.n	80050d8 <memcpy+0xc>
 80050d6:	bd10      	pop	{r4, pc}
 80050d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050e0:	e7f7      	b.n	80050d2 <memcpy+0x6>

080050e2 <memset>:
 80050e2:	4603      	mov	r3, r0
 80050e4:	4402      	add	r2, r0
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d100      	bne.n	80050ec <memset+0xa>
 80050ea:	4770      	bx	lr
 80050ec:	f803 1b01 	strb.w	r1, [r3], #1
 80050f0:	e7f9      	b.n	80050e6 <memset+0x4>
	...

080050f4 <siprintf>:
 80050f4:	b40e      	push	{r1, r2, r3}
 80050f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050fa:	b500      	push	{lr}
 80050fc:	b09c      	sub	sp, #112	; 0x70
 80050fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005100:	9002      	str	r0, [sp, #8]
 8005102:	9006      	str	r0, [sp, #24]
 8005104:	9107      	str	r1, [sp, #28]
 8005106:	9104      	str	r1, [sp, #16]
 8005108:	4808      	ldr	r0, [pc, #32]	; (800512c <siprintf+0x38>)
 800510a:	4909      	ldr	r1, [pc, #36]	; (8005130 <siprintf+0x3c>)
 800510c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005110:	9105      	str	r1, [sp, #20]
 8005112:	6800      	ldr	r0, [r0, #0]
 8005114:	a902      	add	r1, sp, #8
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	f000 f866 	bl	80051e8 <_svfiprintf_r>
 800511c:	2200      	movs	r2, #0
 800511e:	9b02      	ldr	r3, [sp, #8]
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	b01c      	add	sp, #112	; 0x70
 8005124:	f85d eb04 	ldr.w	lr, [sp], #4
 8005128:	b003      	add	sp, #12
 800512a:	4770      	bx	lr
 800512c:	2000001c 	.word	0x2000001c
 8005130:	ffff0208 	.word	0xffff0208

08005134 <__ssputs_r>:
 8005134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005138:	688e      	ldr	r6, [r1, #8]
 800513a:	4682      	mov	sl, r0
 800513c:	429e      	cmp	r6, r3
 800513e:	460c      	mov	r4, r1
 8005140:	4690      	mov	r8, r2
 8005142:	4699      	mov	r9, r3
 8005144:	d837      	bhi.n	80051b6 <__ssputs_r+0x82>
 8005146:	898a      	ldrh	r2, [r1, #12]
 8005148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800514c:	d031      	beq.n	80051b2 <__ssputs_r+0x7e>
 800514e:	2302      	movs	r3, #2
 8005150:	6825      	ldr	r5, [r4, #0]
 8005152:	6909      	ldr	r1, [r1, #16]
 8005154:	1a6f      	subs	r7, r5, r1
 8005156:	6965      	ldr	r5, [r4, #20]
 8005158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800515c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005160:	f109 0301 	add.w	r3, r9, #1
 8005164:	443b      	add	r3, r7
 8005166:	429d      	cmp	r5, r3
 8005168:	bf38      	it	cc
 800516a:	461d      	movcc	r5, r3
 800516c:	0553      	lsls	r3, r2, #21
 800516e:	d530      	bpl.n	80051d2 <__ssputs_r+0x9e>
 8005170:	4629      	mov	r1, r5
 8005172:	f000 fb2d 	bl	80057d0 <_malloc_r>
 8005176:	4606      	mov	r6, r0
 8005178:	b950      	cbnz	r0, 8005190 <__ssputs_r+0x5c>
 800517a:	230c      	movs	r3, #12
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	f8ca 3000 	str.w	r3, [sl]
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800518a:	81a3      	strh	r3, [r4, #12]
 800518c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005190:	463a      	mov	r2, r7
 8005192:	6921      	ldr	r1, [r4, #16]
 8005194:	f7ff ff9a 	bl	80050cc <memcpy>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800519e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	6126      	str	r6, [r4, #16]
 80051a6:	443e      	add	r6, r7
 80051a8:	6026      	str	r6, [r4, #0]
 80051aa:	464e      	mov	r6, r9
 80051ac:	6165      	str	r5, [r4, #20]
 80051ae:	1bed      	subs	r5, r5, r7
 80051b0:	60a5      	str	r5, [r4, #8]
 80051b2:	454e      	cmp	r6, r9
 80051b4:	d900      	bls.n	80051b8 <__ssputs_r+0x84>
 80051b6:	464e      	mov	r6, r9
 80051b8:	4632      	mov	r2, r6
 80051ba:	4641      	mov	r1, r8
 80051bc:	6820      	ldr	r0, [r4, #0]
 80051be:	f000 faa1 	bl	8005704 <memmove>
 80051c2:	68a3      	ldr	r3, [r4, #8]
 80051c4:	2000      	movs	r0, #0
 80051c6:	1b9b      	subs	r3, r3, r6
 80051c8:	60a3      	str	r3, [r4, #8]
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	441e      	add	r6, r3
 80051ce:	6026      	str	r6, [r4, #0]
 80051d0:	e7dc      	b.n	800518c <__ssputs_r+0x58>
 80051d2:	462a      	mov	r2, r5
 80051d4:	f000 fb56 	bl	8005884 <_realloc_r>
 80051d8:	4606      	mov	r6, r0
 80051da:	2800      	cmp	r0, #0
 80051dc:	d1e2      	bne.n	80051a4 <__ssputs_r+0x70>
 80051de:	6921      	ldr	r1, [r4, #16]
 80051e0:	4650      	mov	r0, sl
 80051e2:	f000 faa9 	bl	8005738 <_free_r>
 80051e6:	e7c8      	b.n	800517a <__ssputs_r+0x46>

080051e8 <_svfiprintf_r>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	461d      	mov	r5, r3
 80051ee:	898b      	ldrh	r3, [r1, #12]
 80051f0:	b09d      	sub	sp, #116	; 0x74
 80051f2:	061f      	lsls	r7, r3, #24
 80051f4:	4680      	mov	r8, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	4616      	mov	r6, r2
 80051fa:	d50f      	bpl.n	800521c <_svfiprintf_r+0x34>
 80051fc:	690b      	ldr	r3, [r1, #16]
 80051fe:	b96b      	cbnz	r3, 800521c <_svfiprintf_r+0x34>
 8005200:	2140      	movs	r1, #64	; 0x40
 8005202:	f000 fae5 	bl	80057d0 <_malloc_r>
 8005206:	6020      	str	r0, [r4, #0]
 8005208:	6120      	str	r0, [r4, #16]
 800520a:	b928      	cbnz	r0, 8005218 <_svfiprintf_r+0x30>
 800520c:	230c      	movs	r3, #12
 800520e:	f8c8 3000 	str.w	r3, [r8]
 8005212:	f04f 30ff 	mov.w	r0, #4294967295
 8005216:	e0c8      	b.n	80053aa <_svfiprintf_r+0x1c2>
 8005218:	2340      	movs	r3, #64	; 0x40
 800521a:	6163      	str	r3, [r4, #20]
 800521c:	2300      	movs	r3, #0
 800521e:	9309      	str	r3, [sp, #36]	; 0x24
 8005220:	2320      	movs	r3, #32
 8005222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005226:	2330      	movs	r3, #48	; 0x30
 8005228:	f04f 0b01 	mov.w	fp, #1
 800522c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005230:	9503      	str	r5, [sp, #12]
 8005232:	4637      	mov	r7, r6
 8005234:	463d      	mov	r5, r7
 8005236:	f815 3b01 	ldrb.w	r3, [r5], #1
 800523a:	b10b      	cbz	r3, 8005240 <_svfiprintf_r+0x58>
 800523c:	2b25      	cmp	r3, #37	; 0x25
 800523e:	d13e      	bne.n	80052be <_svfiprintf_r+0xd6>
 8005240:	ebb7 0a06 	subs.w	sl, r7, r6
 8005244:	d00b      	beq.n	800525e <_svfiprintf_r+0x76>
 8005246:	4653      	mov	r3, sl
 8005248:	4632      	mov	r2, r6
 800524a:	4621      	mov	r1, r4
 800524c:	4640      	mov	r0, r8
 800524e:	f7ff ff71 	bl	8005134 <__ssputs_r>
 8005252:	3001      	adds	r0, #1
 8005254:	f000 80a4 	beq.w	80053a0 <_svfiprintf_r+0x1b8>
 8005258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525a:	4453      	add	r3, sl
 800525c:	9309      	str	r3, [sp, #36]	; 0x24
 800525e:	783b      	ldrb	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 809d 	beq.w	80053a0 <_svfiprintf_r+0x1b8>
 8005266:	2300      	movs	r3, #0
 8005268:	f04f 32ff 	mov.w	r2, #4294967295
 800526c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	9307      	str	r3, [sp, #28]
 8005274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005278:	931a      	str	r3, [sp, #104]	; 0x68
 800527a:	462f      	mov	r7, r5
 800527c:	2205      	movs	r2, #5
 800527e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005282:	4850      	ldr	r0, [pc, #320]	; (80053c4 <_svfiprintf_r+0x1dc>)
 8005284:	f000 fa30 	bl	80056e8 <memchr>
 8005288:	9b04      	ldr	r3, [sp, #16]
 800528a:	b9d0      	cbnz	r0, 80052c2 <_svfiprintf_r+0xda>
 800528c:	06d9      	lsls	r1, r3, #27
 800528e:	bf44      	itt	mi
 8005290:	2220      	movmi	r2, #32
 8005292:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005296:	071a      	lsls	r2, r3, #28
 8005298:	bf44      	itt	mi
 800529a:	222b      	movmi	r2, #43	; 0x2b
 800529c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052a0:	782a      	ldrb	r2, [r5, #0]
 80052a2:	2a2a      	cmp	r2, #42	; 0x2a
 80052a4:	d015      	beq.n	80052d2 <_svfiprintf_r+0xea>
 80052a6:	462f      	mov	r7, r5
 80052a8:	2000      	movs	r0, #0
 80052aa:	250a      	movs	r5, #10
 80052ac:	9a07      	ldr	r2, [sp, #28]
 80052ae:	4639      	mov	r1, r7
 80052b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052b4:	3b30      	subs	r3, #48	; 0x30
 80052b6:	2b09      	cmp	r3, #9
 80052b8:	d94d      	bls.n	8005356 <_svfiprintf_r+0x16e>
 80052ba:	b1b8      	cbz	r0, 80052ec <_svfiprintf_r+0x104>
 80052bc:	e00f      	b.n	80052de <_svfiprintf_r+0xf6>
 80052be:	462f      	mov	r7, r5
 80052c0:	e7b8      	b.n	8005234 <_svfiprintf_r+0x4c>
 80052c2:	4a40      	ldr	r2, [pc, #256]	; (80053c4 <_svfiprintf_r+0x1dc>)
 80052c4:	463d      	mov	r5, r7
 80052c6:	1a80      	subs	r0, r0, r2
 80052c8:	fa0b f000 	lsl.w	r0, fp, r0
 80052cc:	4318      	orrs	r0, r3
 80052ce:	9004      	str	r0, [sp, #16]
 80052d0:	e7d3      	b.n	800527a <_svfiprintf_r+0x92>
 80052d2:	9a03      	ldr	r2, [sp, #12]
 80052d4:	1d11      	adds	r1, r2, #4
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	9103      	str	r1, [sp, #12]
 80052da:	2a00      	cmp	r2, #0
 80052dc:	db01      	blt.n	80052e2 <_svfiprintf_r+0xfa>
 80052de:	9207      	str	r2, [sp, #28]
 80052e0:	e004      	b.n	80052ec <_svfiprintf_r+0x104>
 80052e2:	4252      	negs	r2, r2
 80052e4:	f043 0302 	orr.w	r3, r3, #2
 80052e8:	9207      	str	r2, [sp, #28]
 80052ea:	9304      	str	r3, [sp, #16]
 80052ec:	783b      	ldrb	r3, [r7, #0]
 80052ee:	2b2e      	cmp	r3, #46	; 0x2e
 80052f0:	d10c      	bne.n	800530c <_svfiprintf_r+0x124>
 80052f2:	787b      	ldrb	r3, [r7, #1]
 80052f4:	2b2a      	cmp	r3, #42	; 0x2a
 80052f6:	d133      	bne.n	8005360 <_svfiprintf_r+0x178>
 80052f8:	9b03      	ldr	r3, [sp, #12]
 80052fa:	3702      	adds	r7, #2
 80052fc:	1d1a      	adds	r2, r3, #4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	9203      	str	r2, [sp, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	bfb8      	it	lt
 8005306:	f04f 33ff 	movlt.w	r3, #4294967295
 800530a:	9305      	str	r3, [sp, #20]
 800530c:	4d2e      	ldr	r5, [pc, #184]	; (80053c8 <_svfiprintf_r+0x1e0>)
 800530e:	2203      	movs	r2, #3
 8005310:	7839      	ldrb	r1, [r7, #0]
 8005312:	4628      	mov	r0, r5
 8005314:	f000 f9e8 	bl	80056e8 <memchr>
 8005318:	b138      	cbz	r0, 800532a <_svfiprintf_r+0x142>
 800531a:	2340      	movs	r3, #64	; 0x40
 800531c:	1b40      	subs	r0, r0, r5
 800531e:	fa03 f000 	lsl.w	r0, r3, r0
 8005322:	9b04      	ldr	r3, [sp, #16]
 8005324:	3701      	adds	r7, #1
 8005326:	4303      	orrs	r3, r0
 8005328:	9304      	str	r3, [sp, #16]
 800532a:	7839      	ldrb	r1, [r7, #0]
 800532c:	2206      	movs	r2, #6
 800532e:	4827      	ldr	r0, [pc, #156]	; (80053cc <_svfiprintf_r+0x1e4>)
 8005330:	1c7e      	adds	r6, r7, #1
 8005332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005336:	f000 f9d7 	bl	80056e8 <memchr>
 800533a:	2800      	cmp	r0, #0
 800533c:	d038      	beq.n	80053b0 <_svfiprintf_r+0x1c8>
 800533e:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <_svfiprintf_r+0x1e8>)
 8005340:	bb13      	cbnz	r3, 8005388 <_svfiprintf_r+0x1a0>
 8005342:	9b03      	ldr	r3, [sp, #12]
 8005344:	3307      	adds	r3, #7
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	3308      	adds	r3, #8
 800534c:	9303      	str	r3, [sp, #12]
 800534e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005350:	444b      	add	r3, r9
 8005352:	9309      	str	r3, [sp, #36]	; 0x24
 8005354:	e76d      	b.n	8005232 <_svfiprintf_r+0x4a>
 8005356:	fb05 3202 	mla	r2, r5, r2, r3
 800535a:	2001      	movs	r0, #1
 800535c:	460f      	mov	r7, r1
 800535e:	e7a6      	b.n	80052ae <_svfiprintf_r+0xc6>
 8005360:	2300      	movs	r3, #0
 8005362:	250a      	movs	r5, #10
 8005364:	4619      	mov	r1, r3
 8005366:	3701      	adds	r7, #1
 8005368:	9305      	str	r3, [sp, #20]
 800536a:	4638      	mov	r0, r7
 800536c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005370:	3a30      	subs	r2, #48	; 0x30
 8005372:	2a09      	cmp	r2, #9
 8005374:	d903      	bls.n	800537e <_svfiprintf_r+0x196>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0c8      	beq.n	800530c <_svfiprintf_r+0x124>
 800537a:	9105      	str	r1, [sp, #20]
 800537c:	e7c6      	b.n	800530c <_svfiprintf_r+0x124>
 800537e:	fb05 2101 	mla	r1, r5, r1, r2
 8005382:	2301      	movs	r3, #1
 8005384:	4607      	mov	r7, r0
 8005386:	e7f0      	b.n	800536a <_svfiprintf_r+0x182>
 8005388:	ab03      	add	r3, sp, #12
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	4622      	mov	r2, r4
 800538e:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <_svfiprintf_r+0x1ec>)
 8005390:	a904      	add	r1, sp, #16
 8005392:	4640      	mov	r0, r8
 8005394:	f3af 8000 	nop.w
 8005398:	f1b0 3fff 	cmp.w	r0, #4294967295
 800539c:	4681      	mov	r9, r0
 800539e:	d1d6      	bne.n	800534e <_svfiprintf_r+0x166>
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	065b      	lsls	r3, r3, #25
 80053a4:	f53f af35 	bmi.w	8005212 <_svfiprintf_r+0x2a>
 80053a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053aa:	b01d      	add	sp, #116	; 0x74
 80053ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b0:	ab03      	add	r3, sp, #12
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	4622      	mov	r2, r4
 80053b6:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <_svfiprintf_r+0x1ec>)
 80053b8:	a904      	add	r1, sp, #16
 80053ba:	4640      	mov	r0, r8
 80053bc:	f000 f882 	bl	80054c4 <_printf_i>
 80053c0:	e7ea      	b.n	8005398 <_svfiprintf_r+0x1b0>
 80053c2:	bf00      	nop
 80053c4:	08007a28 	.word	0x08007a28
 80053c8:	08007a2e 	.word	0x08007a2e
 80053cc:	08007a32 	.word	0x08007a32
 80053d0:	00000000 	.word	0x00000000
 80053d4:	08005135 	.word	0x08005135

080053d8 <_printf_common>:
 80053d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	4691      	mov	r9, r2
 80053de:	461f      	mov	r7, r3
 80053e0:	688a      	ldr	r2, [r1, #8]
 80053e2:	690b      	ldr	r3, [r1, #16]
 80053e4:	4606      	mov	r6, r0
 80053e6:	4293      	cmp	r3, r2
 80053e8:	bfb8      	it	lt
 80053ea:	4613      	movlt	r3, r2
 80053ec:	f8c9 3000 	str.w	r3, [r9]
 80053f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053f4:	460c      	mov	r4, r1
 80053f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053fa:	b112      	cbz	r2, 8005402 <_printf_common+0x2a>
 80053fc:	3301      	adds	r3, #1
 80053fe:	f8c9 3000 	str.w	r3, [r9]
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	0699      	lsls	r1, r3, #26
 8005406:	bf42      	ittt	mi
 8005408:	f8d9 3000 	ldrmi.w	r3, [r9]
 800540c:	3302      	addmi	r3, #2
 800540e:	f8c9 3000 	strmi.w	r3, [r9]
 8005412:	6825      	ldr	r5, [r4, #0]
 8005414:	f015 0506 	ands.w	r5, r5, #6
 8005418:	d107      	bne.n	800542a <_printf_common+0x52>
 800541a:	f104 0a19 	add.w	sl, r4, #25
 800541e:	68e3      	ldr	r3, [r4, #12]
 8005420:	f8d9 2000 	ldr.w	r2, [r9]
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	42ab      	cmp	r3, r5
 8005428:	dc29      	bgt.n	800547e <_printf_common+0xa6>
 800542a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	3300      	adds	r3, #0
 8005432:	bf18      	it	ne
 8005434:	2301      	movne	r3, #1
 8005436:	0692      	lsls	r2, r2, #26
 8005438:	d42e      	bmi.n	8005498 <_printf_common+0xc0>
 800543a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800543e:	4639      	mov	r1, r7
 8005440:	4630      	mov	r0, r6
 8005442:	47c0      	blx	r8
 8005444:	3001      	adds	r0, #1
 8005446:	d021      	beq.n	800548c <_printf_common+0xb4>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	68e5      	ldr	r5, [r4, #12]
 800544c:	f003 0306 	and.w	r3, r3, #6
 8005450:	2b04      	cmp	r3, #4
 8005452:	bf18      	it	ne
 8005454:	2500      	movne	r5, #0
 8005456:	f8d9 2000 	ldr.w	r2, [r9]
 800545a:	f04f 0900 	mov.w	r9, #0
 800545e:	bf08      	it	eq
 8005460:	1aad      	subeq	r5, r5, r2
 8005462:	68a3      	ldr	r3, [r4, #8]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	bf08      	it	eq
 8005468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800546c:	4293      	cmp	r3, r2
 800546e:	bfc4      	itt	gt
 8005470:	1a9b      	subgt	r3, r3, r2
 8005472:	18ed      	addgt	r5, r5, r3
 8005474:	341a      	adds	r4, #26
 8005476:	454d      	cmp	r5, r9
 8005478:	d11a      	bne.n	80054b0 <_printf_common+0xd8>
 800547a:	2000      	movs	r0, #0
 800547c:	e008      	b.n	8005490 <_printf_common+0xb8>
 800547e:	2301      	movs	r3, #1
 8005480:	4652      	mov	r2, sl
 8005482:	4639      	mov	r1, r7
 8005484:	4630      	mov	r0, r6
 8005486:	47c0      	blx	r8
 8005488:	3001      	adds	r0, #1
 800548a:	d103      	bne.n	8005494 <_printf_common+0xbc>
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005494:	3501      	adds	r5, #1
 8005496:	e7c2      	b.n	800541e <_printf_common+0x46>
 8005498:	2030      	movs	r0, #48	; 0x30
 800549a:	18e1      	adds	r1, r4, r3
 800549c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054a6:	4422      	add	r2, r4
 80054a8:	3302      	adds	r3, #2
 80054aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054ae:	e7c4      	b.n	800543a <_printf_common+0x62>
 80054b0:	2301      	movs	r3, #1
 80054b2:	4622      	mov	r2, r4
 80054b4:	4639      	mov	r1, r7
 80054b6:	4630      	mov	r0, r6
 80054b8:	47c0      	blx	r8
 80054ba:	3001      	adds	r0, #1
 80054bc:	d0e6      	beq.n	800548c <_printf_common+0xb4>
 80054be:	f109 0901 	add.w	r9, r9, #1
 80054c2:	e7d8      	b.n	8005476 <_printf_common+0x9e>

080054c4 <_printf_i>:
 80054c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80054cc:	460c      	mov	r4, r1
 80054ce:	7e09      	ldrb	r1, [r1, #24]
 80054d0:	b085      	sub	sp, #20
 80054d2:	296e      	cmp	r1, #110	; 0x6e
 80054d4:	4617      	mov	r7, r2
 80054d6:	4606      	mov	r6, r0
 80054d8:	4698      	mov	r8, r3
 80054da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054dc:	f000 80b3 	beq.w	8005646 <_printf_i+0x182>
 80054e0:	d822      	bhi.n	8005528 <_printf_i+0x64>
 80054e2:	2963      	cmp	r1, #99	; 0x63
 80054e4:	d036      	beq.n	8005554 <_printf_i+0x90>
 80054e6:	d80a      	bhi.n	80054fe <_printf_i+0x3a>
 80054e8:	2900      	cmp	r1, #0
 80054ea:	f000 80b9 	beq.w	8005660 <_printf_i+0x19c>
 80054ee:	2958      	cmp	r1, #88	; 0x58
 80054f0:	f000 8083 	beq.w	80055fa <_printf_i+0x136>
 80054f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80054fc:	e032      	b.n	8005564 <_printf_i+0xa0>
 80054fe:	2964      	cmp	r1, #100	; 0x64
 8005500:	d001      	beq.n	8005506 <_printf_i+0x42>
 8005502:	2969      	cmp	r1, #105	; 0x69
 8005504:	d1f6      	bne.n	80054f4 <_printf_i+0x30>
 8005506:	6820      	ldr	r0, [r4, #0]
 8005508:	6813      	ldr	r3, [r2, #0]
 800550a:	0605      	lsls	r5, r0, #24
 800550c:	f103 0104 	add.w	r1, r3, #4
 8005510:	d52a      	bpl.n	8005568 <_printf_i+0xa4>
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6011      	str	r1, [r2, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	da03      	bge.n	8005522 <_printf_i+0x5e>
 800551a:	222d      	movs	r2, #45	; 0x2d
 800551c:	425b      	negs	r3, r3
 800551e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005522:	486f      	ldr	r0, [pc, #444]	; (80056e0 <_printf_i+0x21c>)
 8005524:	220a      	movs	r2, #10
 8005526:	e039      	b.n	800559c <_printf_i+0xd8>
 8005528:	2973      	cmp	r1, #115	; 0x73
 800552a:	f000 809d 	beq.w	8005668 <_printf_i+0x1a4>
 800552e:	d808      	bhi.n	8005542 <_printf_i+0x7e>
 8005530:	296f      	cmp	r1, #111	; 0x6f
 8005532:	d020      	beq.n	8005576 <_printf_i+0xb2>
 8005534:	2970      	cmp	r1, #112	; 0x70
 8005536:	d1dd      	bne.n	80054f4 <_printf_i+0x30>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	f043 0320 	orr.w	r3, r3, #32
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	e003      	b.n	800554a <_printf_i+0x86>
 8005542:	2975      	cmp	r1, #117	; 0x75
 8005544:	d017      	beq.n	8005576 <_printf_i+0xb2>
 8005546:	2978      	cmp	r1, #120	; 0x78
 8005548:	d1d4      	bne.n	80054f4 <_printf_i+0x30>
 800554a:	2378      	movs	r3, #120	; 0x78
 800554c:	4865      	ldr	r0, [pc, #404]	; (80056e4 <_printf_i+0x220>)
 800554e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005552:	e055      	b.n	8005600 <_printf_i+0x13c>
 8005554:	6813      	ldr	r3, [r2, #0]
 8005556:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800555a:	1d19      	adds	r1, r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6011      	str	r1, [r2, #0]
 8005560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005564:	2301      	movs	r3, #1
 8005566:	e08c      	b.n	8005682 <_printf_i+0x1be>
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800556e:	6011      	str	r1, [r2, #0]
 8005570:	bf18      	it	ne
 8005572:	b21b      	sxthne	r3, r3
 8005574:	e7cf      	b.n	8005516 <_printf_i+0x52>
 8005576:	6813      	ldr	r3, [r2, #0]
 8005578:	6825      	ldr	r5, [r4, #0]
 800557a:	1d18      	adds	r0, r3, #4
 800557c:	6010      	str	r0, [r2, #0]
 800557e:	0628      	lsls	r0, r5, #24
 8005580:	d501      	bpl.n	8005586 <_printf_i+0xc2>
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	e002      	b.n	800558c <_printf_i+0xc8>
 8005586:	0668      	lsls	r0, r5, #25
 8005588:	d5fb      	bpl.n	8005582 <_printf_i+0xbe>
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	296f      	cmp	r1, #111	; 0x6f
 800558e:	bf14      	ite	ne
 8005590:	220a      	movne	r2, #10
 8005592:	2208      	moveq	r2, #8
 8005594:	4852      	ldr	r0, [pc, #328]	; (80056e0 <_printf_i+0x21c>)
 8005596:	2100      	movs	r1, #0
 8005598:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800559c:	6865      	ldr	r5, [r4, #4]
 800559e:	2d00      	cmp	r5, #0
 80055a0:	60a5      	str	r5, [r4, #8]
 80055a2:	f2c0 8095 	blt.w	80056d0 <_printf_i+0x20c>
 80055a6:	6821      	ldr	r1, [r4, #0]
 80055a8:	f021 0104 	bic.w	r1, r1, #4
 80055ac:	6021      	str	r1, [r4, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d13d      	bne.n	800562e <_printf_i+0x16a>
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	f040 808e 	bne.w	80056d4 <_printf_i+0x210>
 80055b8:	4665      	mov	r5, ip
 80055ba:	2a08      	cmp	r2, #8
 80055bc:	d10b      	bne.n	80055d6 <_printf_i+0x112>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	07db      	lsls	r3, r3, #31
 80055c2:	d508      	bpl.n	80055d6 <_printf_i+0x112>
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	6862      	ldr	r2, [r4, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	bfde      	ittt	le
 80055cc:	2330      	movle	r3, #48	; 0x30
 80055ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055d6:	ebac 0305 	sub.w	r3, ip, r5
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	f8cd 8000 	str.w	r8, [sp]
 80055e0:	463b      	mov	r3, r7
 80055e2:	aa03      	add	r2, sp, #12
 80055e4:	4621      	mov	r1, r4
 80055e6:	4630      	mov	r0, r6
 80055e8:	f7ff fef6 	bl	80053d8 <_printf_common>
 80055ec:	3001      	adds	r0, #1
 80055ee:	d14d      	bne.n	800568c <_printf_i+0x1c8>
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	b005      	add	sp, #20
 80055f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055fa:	4839      	ldr	r0, [pc, #228]	; (80056e0 <_printf_i+0x21c>)
 80055fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005600:	6813      	ldr	r3, [r2, #0]
 8005602:	6821      	ldr	r1, [r4, #0]
 8005604:	1d1d      	adds	r5, r3, #4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6015      	str	r5, [r2, #0]
 800560a:	060a      	lsls	r2, r1, #24
 800560c:	d50b      	bpl.n	8005626 <_printf_i+0x162>
 800560e:	07ca      	lsls	r2, r1, #31
 8005610:	bf44      	itt	mi
 8005612:	f041 0120 	orrmi.w	r1, r1, #32
 8005616:	6021      	strmi	r1, [r4, #0]
 8005618:	b91b      	cbnz	r3, 8005622 <_printf_i+0x15e>
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	f022 0220 	bic.w	r2, r2, #32
 8005620:	6022      	str	r2, [r4, #0]
 8005622:	2210      	movs	r2, #16
 8005624:	e7b7      	b.n	8005596 <_printf_i+0xd2>
 8005626:	064d      	lsls	r5, r1, #25
 8005628:	bf48      	it	mi
 800562a:	b29b      	uxthmi	r3, r3
 800562c:	e7ef      	b.n	800560e <_printf_i+0x14a>
 800562e:	4665      	mov	r5, ip
 8005630:	fbb3 f1f2 	udiv	r1, r3, r2
 8005634:	fb02 3311 	mls	r3, r2, r1, r3
 8005638:	5cc3      	ldrb	r3, [r0, r3]
 800563a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800563e:	460b      	mov	r3, r1
 8005640:	2900      	cmp	r1, #0
 8005642:	d1f5      	bne.n	8005630 <_printf_i+0x16c>
 8005644:	e7b9      	b.n	80055ba <_printf_i+0xf6>
 8005646:	6813      	ldr	r3, [r2, #0]
 8005648:	6825      	ldr	r5, [r4, #0]
 800564a:	1d18      	adds	r0, r3, #4
 800564c:	6961      	ldr	r1, [r4, #20]
 800564e:	6010      	str	r0, [r2, #0]
 8005650:	0628      	lsls	r0, r5, #24
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	d501      	bpl.n	800565a <_printf_i+0x196>
 8005656:	6019      	str	r1, [r3, #0]
 8005658:	e002      	b.n	8005660 <_printf_i+0x19c>
 800565a:	066a      	lsls	r2, r5, #25
 800565c:	d5fb      	bpl.n	8005656 <_printf_i+0x192>
 800565e:	8019      	strh	r1, [r3, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	4665      	mov	r5, ip
 8005664:	6123      	str	r3, [r4, #16]
 8005666:	e7b9      	b.n	80055dc <_printf_i+0x118>
 8005668:	6813      	ldr	r3, [r2, #0]
 800566a:	1d19      	adds	r1, r3, #4
 800566c:	6011      	str	r1, [r2, #0]
 800566e:	681d      	ldr	r5, [r3, #0]
 8005670:	6862      	ldr	r2, [r4, #4]
 8005672:	2100      	movs	r1, #0
 8005674:	4628      	mov	r0, r5
 8005676:	f000 f837 	bl	80056e8 <memchr>
 800567a:	b108      	cbz	r0, 8005680 <_printf_i+0x1bc>
 800567c:	1b40      	subs	r0, r0, r5
 800567e:	6060      	str	r0, [r4, #4]
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	2300      	movs	r3, #0
 8005686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800568a:	e7a7      	b.n	80055dc <_printf_i+0x118>
 800568c:	6923      	ldr	r3, [r4, #16]
 800568e:	462a      	mov	r2, r5
 8005690:	4639      	mov	r1, r7
 8005692:	4630      	mov	r0, r6
 8005694:	47c0      	blx	r8
 8005696:	3001      	adds	r0, #1
 8005698:	d0aa      	beq.n	80055f0 <_printf_i+0x12c>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	079b      	lsls	r3, r3, #30
 800569e:	d413      	bmi.n	80056c8 <_printf_i+0x204>
 80056a0:	68e0      	ldr	r0, [r4, #12]
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	4298      	cmp	r0, r3
 80056a6:	bfb8      	it	lt
 80056a8:	4618      	movlt	r0, r3
 80056aa:	e7a3      	b.n	80055f4 <_printf_i+0x130>
 80056ac:	2301      	movs	r3, #1
 80056ae:	464a      	mov	r2, r9
 80056b0:	4639      	mov	r1, r7
 80056b2:	4630      	mov	r0, r6
 80056b4:	47c0      	blx	r8
 80056b6:	3001      	adds	r0, #1
 80056b8:	d09a      	beq.n	80055f0 <_printf_i+0x12c>
 80056ba:	3501      	adds	r5, #1
 80056bc:	68e3      	ldr	r3, [r4, #12]
 80056be:	9a03      	ldr	r2, [sp, #12]
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	42ab      	cmp	r3, r5
 80056c4:	dcf2      	bgt.n	80056ac <_printf_i+0x1e8>
 80056c6:	e7eb      	b.n	80056a0 <_printf_i+0x1dc>
 80056c8:	2500      	movs	r5, #0
 80056ca:	f104 0919 	add.w	r9, r4, #25
 80056ce:	e7f5      	b.n	80056bc <_printf_i+0x1f8>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ac      	bne.n	800562e <_printf_i+0x16a>
 80056d4:	7803      	ldrb	r3, [r0, #0]
 80056d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056de:	e76c      	b.n	80055ba <_printf_i+0xf6>
 80056e0:	08007a39 	.word	0x08007a39
 80056e4:	08007a4a 	.word	0x08007a4a

080056e8 <memchr>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	b2c9      	uxtb	r1, r1
 80056ec:	4402      	add	r2, r0
 80056ee:	4290      	cmp	r0, r2
 80056f0:	4603      	mov	r3, r0
 80056f2:	d101      	bne.n	80056f8 <memchr+0x10>
 80056f4:	2300      	movs	r3, #0
 80056f6:	e003      	b.n	8005700 <memchr+0x18>
 80056f8:	781c      	ldrb	r4, [r3, #0]
 80056fa:	3001      	adds	r0, #1
 80056fc:	428c      	cmp	r4, r1
 80056fe:	d1f6      	bne.n	80056ee <memchr+0x6>
 8005700:	4618      	mov	r0, r3
 8005702:	bd10      	pop	{r4, pc}

08005704 <memmove>:
 8005704:	4288      	cmp	r0, r1
 8005706:	b510      	push	{r4, lr}
 8005708:	eb01 0302 	add.w	r3, r1, r2
 800570c:	d807      	bhi.n	800571e <memmove+0x1a>
 800570e:	1e42      	subs	r2, r0, #1
 8005710:	4299      	cmp	r1, r3
 8005712:	d00a      	beq.n	800572a <memmove+0x26>
 8005714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005718:	f802 4f01 	strb.w	r4, [r2, #1]!
 800571c:	e7f8      	b.n	8005710 <memmove+0xc>
 800571e:	4283      	cmp	r3, r0
 8005720:	d9f5      	bls.n	800570e <memmove+0xa>
 8005722:	1881      	adds	r1, r0, r2
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	42d3      	cmn	r3, r2
 8005728:	d100      	bne.n	800572c <memmove+0x28>
 800572a:	bd10      	pop	{r4, pc}
 800572c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005730:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005734:	e7f7      	b.n	8005726 <memmove+0x22>
	...

08005738 <_free_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4605      	mov	r5, r0
 800573c:	2900      	cmp	r1, #0
 800573e:	d043      	beq.n	80057c8 <_free_r+0x90>
 8005740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005744:	1f0c      	subs	r4, r1, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfb8      	it	lt
 800574a:	18e4      	addlt	r4, r4, r3
 800574c:	f000 f8d0 	bl	80058f0 <__malloc_lock>
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <_free_r+0x94>)
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	4610      	mov	r0, r2
 8005756:	b933      	cbnz	r3, 8005766 <_free_r+0x2e>
 8005758:	6063      	str	r3, [r4, #4]
 800575a:	6014      	str	r4, [r2, #0]
 800575c:	4628      	mov	r0, r5
 800575e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005762:	f000 b8c6 	b.w	80058f2 <__malloc_unlock>
 8005766:	42a3      	cmp	r3, r4
 8005768:	d90b      	bls.n	8005782 <_free_r+0x4a>
 800576a:	6821      	ldr	r1, [r4, #0]
 800576c:	1862      	adds	r2, r4, r1
 800576e:	4293      	cmp	r3, r2
 8005770:	bf01      	itttt	eq
 8005772:	681a      	ldreq	r2, [r3, #0]
 8005774:	685b      	ldreq	r3, [r3, #4]
 8005776:	1852      	addeq	r2, r2, r1
 8005778:	6022      	streq	r2, [r4, #0]
 800577a:	6063      	str	r3, [r4, #4]
 800577c:	6004      	str	r4, [r0, #0]
 800577e:	e7ed      	b.n	800575c <_free_r+0x24>
 8005780:	4613      	mov	r3, r2
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	b10a      	cbz	r2, 800578a <_free_r+0x52>
 8005786:	42a2      	cmp	r2, r4
 8005788:	d9fa      	bls.n	8005780 <_free_r+0x48>
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	1858      	adds	r0, r3, r1
 800578e:	42a0      	cmp	r0, r4
 8005790:	d10b      	bne.n	80057aa <_free_r+0x72>
 8005792:	6820      	ldr	r0, [r4, #0]
 8005794:	4401      	add	r1, r0
 8005796:	1858      	adds	r0, r3, r1
 8005798:	4282      	cmp	r2, r0
 800579a:	6019      	str	r1, [r3, #0]
 800579c:	d1de      	bne.n	800575c <_free_r+0x24>
 800579e:	6810      	ldr	r0, [r2, #0]
 80057a0:	6852      	ldr	r2, [r2, #4]
 80057a2:	4401      	add	r1, r0
 80057a4:	6019      	str	r1, [r3, #0]
 80057a6:	605a      	str	r2, [r3, #4]
 80057a8:	e7d8      	b.n	800575c <_free_r+0x24>
 80057aa:	d902      	bls.n	80057b2 <_free_r+0x7a>
 80057ac:	230c      	movs	r3, #12
 80057ae:	602b      	str	r3, [r5, #0]
 80057b0:	e7d4      	b.n	800575c <_free_r+0x24>
 80057b2:	6820      	ldr	r0, [r4, #0]
 80057b4:	1821      	adds	r1, r4, r0
 80057b6:	428a      	cmp	r2, r1
 80057b8:	bf01      	itttt	eq
 80057ba:	6811      	ldreq	r1, [r2, #0]
 80057bc:	6852      	ldreq	r2, [r2, #4]
 80057be:	1809      	addeq	r1, r1, r0
 80057c0:	6021      	streq	r1, [r4, #0]
 80057c2:	6062      	str	r2, [r4, #4]
 80057c4:	605c      	str	r4, [r3, #4]
 80057c6:	e7c9      	b.n	800575c <_free_r+0x24>
 80057c8:	bd38      	pop	{r3, r4, r5, pc}
 80057ca:	bf00      	nop
 80057cc:	200004c0 	.word	0x200004c0

080057d0 <_malloc_r>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	1ccd      	adds	r5, r1, #3
 80057d4:	f025 0503 	bic.w	r5, r5, #3
 80057d8:	3508      	adds	r5, #8
 80057da:	2d0c      	cmp	r5, #12
 80057dc:	bf38      	it	cc
 80057de:	250c      	movcc	r5, #12
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	4606      	mov	r6, r0
 80057e4:	db01      	blt.n	80057ea <_malloc_r+0x1a>
 80057e6:	42a9      	cmp	r1, r5
 80057e8:	d903      	bls.n	80057f2 <_malloc_r+0x22>
 80057ea:	230c      	movs	r3, #12
 80057ec:	6033      	str	r3, [r6, #0]
 80057ee:	2000      	movs	r0, #0
 80057f0:	bd70      	pop	{r4, r5, r6, pc}
 80057f2:	f000 f87d 	bl	80058f0 <__malloc_lock>
 80057f6:	4a21      	ldr	r2, [pc, #132]	; (800587c <_malloc_r+0xac>)
 80057f8:	6814      	ldr	r4, [r2, #0]
 80057fa:	4621      	mov	r1, r4
 80057fc:	b991      	cbnz	r1, 8005824 <_malloc_r+0x54>
 80057fe:	4c20      	ldr	r4, [pc, #128]	; (8005880 <_malloc_r+0xb0>)
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	b91b      	cbnz	r3, 800580c <_malloc_r+0x3c>
 8005804:	4630      	mov	r0, r6
 8005806:	f000 f863 	bl	80058d0 <_sbrk_r>
 800580a:	6020      	str	r0, [r4, #0]
 800580c:	4629      	mov	r1, r5
 800580e:	4630      	mov	r0, r6
 8005810:	f000 f85e 	bl	80058d0 <_sbrk_r>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d124      	bne.n	8005862 <_malloc_r+0x92>
 8005818:	230c      	movs	r3, #12
 800581a:	4630      	mov	r0, r6
 800581c:	6033      	str	r3, [r6, #0]
 800581e:	f000 f868 	bl	80058f2 <__malloc_unlock>
 8005822:	e7e4      	b.n	80057ee <_malloc_r+0x1e>
 8005824:	680b      	ldr	r3, [r1, #0]
 8005826:	1b5b      	subs	r3, r3, r5
 8005828:	d418      	bmi.n	800585c <_malloc_r+0x8c>
 800582a:	2b0b      	cmp	r3, #11
 800582c:	d90f      	bls.n	800584e <_malloc_r+0x7e>
 800582e:	600b      	str	r3, [r1, #0]
 8005830:	18cc      	adds	r4, r1, r3
 8005832:	50cd      	str	r5, [r1, r3]
 8005834:	4630      	mov	r0, r6
 8005836:	f000 f85c 	bl	80058f2 <__malloc_unlock>
 800583a:	f104 000b 	add.w	r0, r4, #11
 800583e:	1d23      	adds	r3, r4, #4
 8005840:	f020 0007 	bic.w	r0, r0, #7
 8005844:	1ac3      	subs	r3, r0, r3
 8005846:	d0d3      	beq.n	80057f0 <_malloc_r+0x20>
 8005848:	425a      	negs	r2, r3
 800584a:	50e2      	str	r2, [r4, r3]
 800584c:	e7d0      	b.n	80057f0 <_malloc_r+0x20>
 800584e:	684b      	ldr	r3, [r1, #4]
 8005850:	428c      	cmp	r4, r1
 8005852:	bf16      	itet	ne
 8005854:	6063      	strne	r3, [r4, #4]
 8005856:	6013      	streq	r3, [r2, #0]
 8005858:	460c      	movne	r4, r1
 800585a:	e7eb      	b.n	8005834 <_malloc_r+0x64>
 800585c:	460c      	mov	r4, r1
 800585e:	6849      	ldr	r1, [r1, #4]
 8005860:	e7cc      	b.n	80057fc <_malloc_r+0x2c>
 8005862:	1cc4      	adds	r4, r0, #3
 8005864:	f024 0403 	bic.w	r4, r4, #3
 8005868:	42a0      	cmp	r0, r4
 800586a:	d005      	beq.n	8005878 <_malloc_r+0xa8>
 800586c:	1a21      	subs	r1, r4, r0
 800586e:	4630      	mov	r0, r6
 8005870:	f000 f82e 	bl	80058d0 <_sbrk_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d0cf      	beq.n	8005818 <_malloc_r+0x48>
 8005878:	6025      	str	r5, [r4, #0]
 800587a:	e7db      	b.n	8005834 <_malloc_r+0x64>
 800587c:	200004c0 	.word	0x200004c0
 8005880:	200004c4 	.word	0x200004c4

08005884 <_realloc_r>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	4607      	mov	r7, r0
 8005888:	4614      	mov	r4, r2
 800588a:	460e      	mov	r6, r1
 800588c:	b921      	cbnz	r1, 8005898 <_realloc_r+0x14>
 800588e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005892:	4611      	mov	r1, r2
 8005894:	f7ff bf9c 	b.w	80057d0 <_malloc_r>
 8005898:	b922      	cbnz	r2, 80058a4 <_realloc_r+0x20>
 800589a:	f7ff ff4d 	bl	8005738 <_free_r>
 800589e:	4625      	mov	r5, r4
 80058a0:	4628      	mov	r0, r5
 80058a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a4:	f000 f826 	bl	80058f4 <_malloc_usable_size_r>
 80058a8:	42a0      	cmp	r0, r4
 80058aa:	d20f      	bcs.n	80058cc <_realloc_r+0x48>
 80058ac:	4621      	mov	r1, r4
 80058ae:	4638      	mov	r0, r7
 80058b0:	f7ff ff8e 	bl	80057d0 <_malloc_r>
 80058b4:	4605      	mov	r5, r0
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d0f2      	beq.n	80058a0 <_realloc_r+0x1c>
 80058ba:	4631      	mov	r1, r6
 80058bc:	4622      	mov	r2, r4
 80058be:	f7ff fc05 	bl	80050cc <memcpy>
 80058c2:	4631      	mov	r1, r6
 80058c4:	4638      	mov	r0, r7
 80058c6:	f7ff ff37 	bl	8005738 <_free_r>
 80058ca:	e7e9      	b.n	80058a0 <_realloc_r+0x1c>
 80058cc:	4635      	mov	r5, r6
 80058ce:	e7e7      	b.n	80058a0 <_realloc_r+0x1c>

080058d0 <_sbrk_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	2300      	movs	r3, #0
 80058d4:	4c05      	ldr	r4, [pc, #20]	; (80058ec <_sbrk_r+0x1c>)
 80058d6:	4605      	mov	r5, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	6023      	str	r3, [r4, #0]
 80058dc:	f7fc faca 	bl	8001e74 <_sbrk>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_sbrk_r+0x1a>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_sbrk_r+0x1a>
 80058e8:	602b      	str	r3, [r5, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	20000784 	.word	0x20000784

080058f0 <__malloc_lock>:
 80058f0:	4770      	bx	lr

080058f2 <__malloc_unlock>:
 80058f2:	4770      	bx	lr

080058f4 <_malloc_usable_size_r>:
 80058f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f8:	1f18      	subs	r0, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	bfbc      	itt	lt
 80058fe:	580b      	ldrlt	r3, [r1, r0]
 8005900:	18c0      	addlt	r0, r0, r3
 8005902:	4770      	bx	lr

08005904 <_init>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	bf00      	nop
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr

08005910 <_fini>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr
